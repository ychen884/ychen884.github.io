<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ychen884.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ychen884.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-19T06:57:27+00:00</updated><id>https://ychen884.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Information Security - Currently Updating…</title><link href="https://ychen884.github.io/blog/2023/14741/" rel="alternate" type="text/html" title="Information Security - Currently Updating…"/><published>2023-08-29T11:00:00+00:00</published><updated>2023-08-29T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/14741</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/14741/"><![CDATA[<h3 id="course-evaluation-final-grade-a">Course Evaluation (Final grade: A)</h3> <p>This course is structured for those who have minimal or some previous experience in computer security. It covers a broad spectrum of topics and also delves deeply into each area. The exams present a considerable challenge, and the lab requires effort, depending on the student’s prior knowledge in security. Despite having studied information security and software security during my undergraduate studies, I found the labs in this course particularly engaging. Some topics, like cryptocurrency, privacy, and security management, were especially intriguing and somewhat new to me, adding a fresh perspective to my learning experience.</p> <h3 id="reference-book">Reference Book</h3> <h4 id="security-engineering-a-guide-to-building-dependable-systems-by-ross-j-anderson">Security Engineering: A Guide to Building Dependable Systems, by Ross J. Anderson</h4>]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Info Sec - INI]]></summary></entry><entry><title type="html">Computer Systems - Currently Updating…</title><link href="https://ychen884.github.io/blog/2023/15513/" rel="alternate" type="text/html" title="Computer Systems - Currently Updating…"/><published>2023-08-29T11:00:00+00:00</published><updated>2023-08-29T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/15513</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/15513/"><![CDATA[<h3 id="course-evaluation-final-grade-a">Course Evaluation (Final grade: A)</h3> <p>This course is exceptional, thoroughly covering computer systems with engaging labs. The material is comprehensive yet manageable, ensuring exams and labs are not overwhelming. Highly recommended.</p>]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Computer Science - 213/513]]></summary></entry><entry><title type="html">Distributed Systems - Currently Upating…</title><link href="https://ychen884.github.io/blog/2023/15640/" rel="alternate" type="text/html" title="Distributed Systems - Currently Upating…"/><published>2023-08-28T11:00:00+00:00</published><updated>2023-08-28T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/15640</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/15640/"><![CDATA[<h3 id="course-evaluation-final-grade-na">Course Evaluation (Final grade: N/A)</h3> <p>I will add my course evaluation at the end of this semester.</p> <h3 id="paper-reviews">Paper reviews</h3> <p>I will upload my paper reviews here later.</p> <h2 id="blog-chapters"><strong>Blog Chapters</strong></h2> <ol> <li><a href="#topic-1">Chapter 1: Remote Procedure Call (RPC)</a></li> <li><a href="#topic-2">Chapter 2: </a></li> <li><a href="#topic-3">Chapter 3: </a></li> <li><a href="#topic-4">Chapter 4: </a></li> <li><a href="#topic-5">Chapter 5: </a></li> <li><a href="#topic-6">Chapter 6: </a></li> <li><a href="#topic-7">Chapter 7: </a></li> </ol> <h2 id="-chapter-1-remote-procedure-call-rpc--">** Chapter 1: Remote Procedure Call (RPC) ** <a name="topic-1"></a></h2> <ul> <li>Try to fake procedure call to local programming</li> <li>Why? bring down programming complexity for distributed systems</li> <li>client-server model, per interface</li> <li>two aspects: control flow, invocation syntax</li> <li>with network delays (theoretically best at speed of light)</li> </ul> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <p><a href="#blog-chapters">Back to Blog Chapters</a></p>]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Distributed Systems - SCS]]></summary></entry><entry><title type="html">Compiler Design - Currently Upating…</title><link href="https://ychen884.github.io/blog/2023/15661/" rel="alternate" type="text/html" title="Compiler Design - Currently Upating…"/><published>2023-08-28T11:00:00+00:00</published><updated>2023-08-28T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/15661</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/15661/"><![CDATA[<h3 id="course-evaluation-final-grade-na">Course Evaluation (Final grade: N/A)</h3> <p>I will add my course evaluation at the end of this semester.</p> <h3 id="paper-reviews">Paper reviews</h3> <p>I will upload my paper reviews here later.</p> <h2 id="blog-chapters"><strong>Blog Chapters</strong></h2> <ol> <li><a href="#topic-1">Chapter 1: Overview of Compiler Design</a></li> <li><a href="#topic-1.1">Chapter 1.1: Instruction Selection</a></li> <li><a href="#topic-1.2">Chapter 1.2: </a></li> </ol> <h2 id="chapter-1-overview-of-compiler-design--">**Chapter 1: Overview of Compiler Design ** <a name="topic-1"></a></h2> <h3 id="what-makes-a-good-compiler-metrics">What makes a good Compiler: metrics</h3> <ul> <li>correctness</li> <li>code quality: compiled code runs fast</li> <li>efficiency: compilation runs fast</li> <li>usability: provides errors/warnings, …</li> </ul> <h3 id="compiler-design">Compiler Design</h3> <ul> <li>structure compilers</li> <li>applied alg &amp; data structures</li> <li>focus on sequential imperative programming languages</li> <li> <ul> <li>not functional, parallel, distributed, OOP…</li> </ul> </li> <li>code generation and optimization</li> </ul> <h3 id="organizing-a-compiler">Organizing a compiler</h3> <h4 id="front">Front</h4> <ul> <li>split work into different phases</li> <li>Lexical analysis -&gt; Token stream</li> <li>Parsing -&gt; Abstract syntax tree (mark body of while loop…)</li> <li>Sementic analysis (type check, variable initialization)</li> </ul> <h4 id="middle">Middle</h4> <ul> <li>IR Generation -&gt; Intermediate representations</li> <li>Optimize (most challenging)</li> </ul> <h4 id="back">Back</h4> <ul> <li>Instruction selection -&gt; Abstract assembly</li> <li>Register allocation -&gt; ASM Middle and Back has unclear distinctions</li> </ul> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h2 id="chapter-11-instruction-selection--">**Chapter 1.1: Instruction Selection ** <a name="topic-1.1"></a></h2> <ul> <li>Compiler phase</li> <li>IR tree -&gt; abstract assembly</li> </ul> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x = 5
return x+x+x*2

-&gt;&gt;&gt; Instruction selection
x = 5
temp1 = x + x 
temp2 = x * 2
ret_reg = t1 + t2
ret
</code></pre></div></div> <ul> <li>IR tree ``` Programs p ::= s1,…sn (sequence of statements) statemetss s ::= x = e return e</li> </ul> <p>Expressions: e ::= c int const x variable e1 ⊕ e2 binary OP ⊕ ::= +1 * 1 / 1 …</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- Abstract Assembly
</code></pre></div></div> <p>Program: p ::= i1, … in (instructions) Instructions i::= d &lt;- s move = s &lt;- s1 ⊕ s2 bin op ret return Operands: d,s ::= r register = c int const = t temps</p> <p>```</p> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <p><a href="#blog-chapters">Back to Blog Chapters</a></p>]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Compiler Design - SCS]]></summary></entry><entry><title type="html">Advanced Cloud Computing Notes - Currently Upating…</title><link href="https://ychen884.github.io/blog/2023/15719/" rel="alternate" type="text/html" title="Advanced Cloud Computing Notes - Currently Upating…"/><published>2023-08-28T11:00:00+00:00</published><updated>2023-08-28T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/15719</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/15719/"><![CDATA[<h3 id="course-evaluation-final-grade-na">Course Evaluation (Final grade: N/A)</h3> <p>I will add my course evaluation at the end of this semester.</p> <h2 id="blog-chapters"><strong>Blog Chapters</strong></h2> <ol> <li><a href="#topic-1">Chapter 1: Overview of Cloud Computing</a></li> <li><a href="#topic-2">Chapter 2: </a></li> <li><a href="#topic-3">Chapter 3: </a></li> <li><a href="#topic-4">Chapter 4: </a></li> <li><a href="#topic-5">Chapter 5: </a></li> <li><a href="#topic-6">Chapter 6: </a></li> <li><a href="#topic-7">Chapter 7: </a></li> </ol> <h2 id="-chapter-1-overview-of-cloud-computing--">** Chapter 1: Overview of Cloud Computing ** <a name="topic-1"></a></h2> <h4 id="definitions">Definitions</h4> <h5 id="properties">Properties:</h5> <ul> <li>Computing utility, always available, accessible through the networks</li> <li>Simplified interface</li> <li>Statistical multiplexing, sharing resources</li> <li>Economies of scale from consolidation, costs lower</li> <li>Capital costs converted to operating costs</li> <li>Rapid and easy variation of usage</li> <li>Appearance of infinite resources with small users</li> <li>Pay only for what you use</li> <li>Cost conservation: 1 unit for 1000 hours == 1000 units for 1 hour</li> </ul> <h5 id="consolidation-sharing-elasticity">Consolidation, sharing, elasticity</h5> <ul> <li>CLT theory</li> <li>users with widely varying needs apply a considerably less variable load on a huge provider, allowing providers to do less overprovisioning.</li> <li> <ul> <li>Because of CLT, it is predictable for the overall load which causes less overprovisioning.</li> </ul> </li> <li>Users perceive exactly what they need all the time, if their needs are “small”(so the accessed resources are appearing as infinite)</li> </ul> <h5 id="saas-paas-iaas">SaaS, PaaS, IaaS</h5> <ul> <li>SaaS: service as application (Salesforce)</li> <li>PaaS: high-level programming model for cloud computer, Turing complete but resource management hidden. (Google AppEngine)</li> <li>IaaS: low-level computing model for cloud computer (AWS)</li> </ul> <h5 id="xxx-as-a-service">XXX as a Service</h5> <ul> <li>Data as a Service, Network as a Service, Communication as a Service(No hardware private VOIP switching), IT as a Service(IT providing services)..</li> </ul> <h5 id="deployment-models">Deployment models</h5> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public cloud: provider sells computing to unrelated consumers
private cloud: largely unrelated components and divisions as consumers
community cloud: providers and consumers are different organizations with strong shared concerns
Hybrid cloud: private plus public resources combined by same consumer. Better availability, overflow from private to public, load balancing to increase elasticity
</code></pre></div></div> <h5 id="larry-ellisons-objection">Larry Ellison’s objection</h5> <ul> <li>definition is including too much </li> </ul> <h5 id="obstacles-of-cloud-computing">Obstacles of cloud computing</h5> <ul> <li>Privacy &amp; security</li> <li>Privacy in the world tends to rely on regulation</li> <li>Utility issues</li> <li>Physical utilities tend to rely on regulation</li> <li>High cost of networking combined with always remote</li> <li>Performance unpredictability &amp; in situ development/debugging</li> <li>Software licensing – $/yr/CPU is not elastic and pay as you go</li> </ul> <h5 id="load-balancing-approach">load balancing approach</h5> <h5 id="1-dns-load-balancing">1. DNS load balancing</h5> <ul> <li>DNS reorder the list for each client asking for translation of name</li> <li>PRO: easy to scale, unrelated to actual TCP/HTTP requests</li> <li>CON: new server may get less resources if scheduling more servers, dynamic changing is hard because it has to tell client for a binding(existing binding exists due to TTL, caching in network middleboxes).</li> </ul> <h5 id="2-router-distribute-tcp-connections">2. Router distribute TCP connections</h5> <ul> <li>Router do the mapping: (client_ip+client_port) &lt;-&gt; (server_ip+server_port)</li> <li> <ul> <li>for SYN packets</li> </ul> </li> <li> <ul> <li>not exposed to client about the ip address(like NAT)</li> </ul> </li> <li>PRO: router doesn’t have to think or remember too much, *it just selected the server with least connnection to schedule for the new connections.</li> <li>CON: traffic all go through the router(more difficult to scale), and decision takes time cuz it’s for the entire session</li> </ul> <h4 id="3-router-distribute-individual-quests-embedded-in-connections">3. Router distribute individual quests embedded in connections</h4> <ul> <li>PRO: most dynamic</li> <li>CON: requires the most processing and state in the router, CPU load and memory goes up due to intelligent routing decisions. <h4 id="elasticit-how-elasticity-controller">Elasticit: How? Elasticity controller</h4> </li> <li>Elasticity controller to adjust load capability based on current load status</li> <li>Monitoring: resource usage, request sequence(patterns)</li> <li>Triggering: (simple conditions like thresholds), schedule, complex model based on monitored instances</li> </ul> <h4 id="elasticity-scale-out-or-scale-up">Elasticity: Scale-out or Scale up</h4> <ul> <li>Horizontal scaling: adding more instances (Common approach)</li> <li>Vertical scaling: Resizing the resources(bdw, cpu cores, memory) allocated to an existing instances, challenging(different OS.) More challenging.</li> </ul> <h4 id="two-tier-services">Two-tier services</h4> <ul> <li>web-database</li> <li>web server easy to be in cloud. At beginning, order-taking is not in cloud.</li> <li>Elasticity in IaaS: database scaling is more difficult with state(consistency)</li> <li>PassS, P=Web Service. Built-in elastic load balancing and scheduled actions for containers, persistent key-value store (datastore) &amp; non-persistent memcache for simple database tier, Users can instantiate Backends, user code can request (actuate) horizontal scaling, running traditional database services, whose scaling is still hard.</li> </ul> <h5 id="load-balancing-method-affect-how-much-statistics-we-can-get">Load-balancing method affect how much statistics we can get.</h5> <ul> <li>Router-based load balancing: firewall, intrusion detection, accelerator</li> <li>scaling middleboxes: CPU intensive tasks. (OpenFlow, split flows)</li> <li>bdw allocation by sw/rt</li> </ul> <h5 id="service-parallelization-load-balancer">Service parallelization: Load Balancer</h5> <ul> <li>aws cloud watch</li> <li>Load balancer is not necessarily elastic</li> </ul> <h5 id="scalable-relational-database">Scalable relational database</h5> <ul> <li>Separate data at rest(distributed pay-for-use storage (HDFS)) from ongoing or recent access &amp; mutation</li> <li>Recent access &amp; mutation servers are elastic (called Owning Transaction Managers)</li> <li>Partitioned but all transactions restricted to one partition: transactions block on locks and bottleneck performance scaling</li> <li>Fault-tolerance of Elastic controller. Controller itself, reliability provided by replication. Can re-assigns partitions while server is down/start up.</li> </ul> <h5 id="elastras-architecture-scales-otm-machines">ElasTraS architecture scales OTM machines</h5> <ul> <li>Transactions are limited to interacting with data from only one partition to avoid the complexity of distributed transactions.</li> <li></li> </ul> <h3 id="paper-reading-notes">Paper reading notes</h3> <p>I will upload my paper reviews here later.</p> <ul> <li>Armbrust2010 ``` Referring to http://doi.acm.org/10.1145/1721654.1721672 Cloud computing: what brings it? large capital outlays, overprovisioning/underprovisioning…</li> </ul> <p>Definition: Refers to both the applications as services over the internet and hardware and systems software in the data center that provide those services. The services themselves: SaaS. Services being sold is utility computing. Cloud computing = SaaS + utility computing. It has to be large enough to be called cloud. Hardware provisioning/pricing: 1. inifinite computing resources available on demand; 3. elimination of an up-front commitment by cloud users, add resources when needed; 4. pay for use of computing resources temporarily. *Construction and operaition of extremely large-scale, commodify-computer data centers at low-cost locations was the key necessary enabler of cloud computing. It could offer services below the costs of a medium-sized data center and make profits.</p> <p>Utility Computing classes: EC2 with low level control but less automatic scalability and failover(application may need to control the replication…). Google AppEngine(domain specific platforms) on the other hand. Azure is in between.</p> <p>Economics: Favor cloud computing over conventional: 1. demand of services changes over time 2. demand is unknown usage based pricing economically benefits the buyer. Elasticity helps reduce the costs. Underprovisioning has a cost that is difficult to measure: the users may never come back. Scale-up elasticity is an operational requirement, and scale-down elasticity allowed the steady state expenditure to more closely match the steady-state workload.</p> <p>Obstacles for Cloud computing:</p> <p>1-3(adoption):</p> <ol> <li>Business Continuity and Service Availability (hard to ensure availability, single failure still exists for a service provider)</li> <li>Data Lock-In (public+private sharing by sharing API)</li> <li>Data Confidentiality/Auditability: from other user/provider</li> </ol> <p>4-8(growth):</p> <ol> <li>Data Transfer Bottlenecks： Applications continue to become more data-intensive</li> <li>Performance Unpredictability： I/O interference between virtual machines, concerns scheduling of virtual machines for some classes of batch processing programs, specifically for highperformance computing 6.Scalable Storage 7.Bugs in Large Scale Distributed Systems: bugs cannot be reproduced in smaller configurations 8.Scaling Quickly</li> </ol> <p>9-10(policy and business):</p> <ol> <li>Reputation Fate Sharing, legal liability(customer responsible-&gt;unexpected down)</li> <li>Software Licensing</li> </ol> <p>Opportunities:</p> <ul> <li>improve architectures and operating systems to efficiently virtualize interrupts and I/O channels</li> <li>flash memory will decrease I/O interference.</li> <li>offer something like “gang scheduling” for cloud computing</li> <li>create a storage system that would not only meet existing programmer expectations,but combine them with the cloud advantages of scaling arbitrarily up and down on demand.</li> <li>reliance on virtual machines in cloud computing.(7)</li> <li>automatically scale quickly up and down in response to load in order to save money</li> <li> <p>create reputation-guarding services similar to the “trusted email” services ```</p> </li> <li>NISTdef2011</li> <li>Vaquero11</li> </ul> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <p><a href="#blog-chapters">Back to Blog Chapters</a></p>]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Advanced Cloud Computing Notes - SCS]]></summary></entry><entry><title type="html">Fundamentals of Telecommunication Networks - Currently Upating…</title><link href="https://ychen884.github.io/blog/2023/14740/" rel="alternate" type="text/html" title="Fundamentals of Telecommunication Networks - Currently Upating…"/><published>2023-08-28T11:00:00+00:00</published><updated>2023-08-28T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/14740</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/14740/"><![CDATA[<h3 id="course-evaluation-final-grade-a">Course Evaluation (Final grade: A)</h3> <p>This course is designed for individuals with minimal or no prior knowledge of computer networks. It delves into the intricate details of various protocols. The exams are generally easy to manage, but the labs may demand a significant amount of effort. Students should be aware that they will be sharing server resources with many others, leading to potential issues with resource contention. It also includes reviews of some state-of-the-art papers in the field.</p> <h3 id="paper-reviews">Paper reviews</h3> <p>I will upload my paper reviews here later.</p> <h3 id="reference-book">Reference Book</h3> <h4 id="computer-networking-7th-edition-james-kurose-and-keith-ross">Computer Networking 7th Edition, James Kurose, and Keith Ross</h4>]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[computer networks - INI]]></summary></entry><entry><title type="html">Link to our Game Development Project - TimeOut</title><link href="https://ychen884.github.io/blog/2023/gameDev/" rel="alternate" type="text/html" title="Link to our Game Development Project - TimeOut"/><published>2023-08-27T18:37:00+00:00</published><updated>2023-08-27T18:37:00+00:00</updated><id>https://ychen884.github.io/blog/2023/gameDev</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/gameDev/"><![CDATA[<p>Check this out: https://rod233.itch.io/timeout I worked as a member of the SE team - Graphics.</p>]]></content><author><name></name></author><category term="Study"/><category term="Dev"/><summary type="html"><![CDATA[:) An interesting game dev project.]]></summary></entry><entry><title type="html">My Courses &amp;amp; Grades in UW-Madison</title><link href="https://ychen884.github.io/blog/2023/undergradCourses/" rel="alternate" type="text/html" title="My Courses &amp;amp; Grades in UW-Madison"/><published>2023-08-20T18:37:00+00:00</published><updated>2023-08-20T18:37:00+00:00</updated><id>https://ychen884.github.io/blog/2023/undergradCourses</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/undergradCourses/"><![CDATA[ <p>The University of Wisconsin-Madison offers an exceptional Computer Science track for undergraduate students, enabling them to delve into various fields within the discipline. During my undergraduate studies, I concentrated on system courses, which allowed me to gain valuable insights into this specialized area.</p> <p>Below is a breakdown of the courses I undertook at UW-Madison. The advanced courses have been highlighted at the beginning of the list for emphasis. I am profoundly grateful to my instructors, whose dedication and passion have significantly shaped my academic journey. Their guidance, coupled with my relentless hard work and consistent efforts, has truly made a difference in my education.</p> <p>The courses at UW-Madison are categorized into three distinct levels:</p> <p>Elementary (E): Typically, entry-level courses designed for freshmen and sophomores. Intermediate (I): These courses are aimed at students in their sophomore to junior years. Advanced (A): Targeted at students in their junior to senior years, these courses focus on more specialized and complex topics. The education I received at UW-Madison has not only broadened my knowledge but also laid a solid foundation for my future pursuits in the field of Computer Science.</p> <table data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-field="Courses">Courses</th> <th data-field="Description">Description</th> <th data-field="Final Grade">Final Grade</th> </tr> </thead> </table> <p></p> ]]></content><author><name></name></author><category term="Study"/><category term="UW-Madison"/><summary type="html"><![CDATA[:) I enjoy all the courses I took in UW-Madison.]]></summary></entry></feed>