<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ychen884.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ychen884.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-16T14:19:50+00:00</updated><id>https://ychen884.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Information Security - Currently Updating…</title><link href="https://ychen884.github.io/blog/2023/14741/" rel="alternate" type="text/html" title="Information Security - Currently Updating…"/><published>2023-08-29T11:00:00+00:00</published><updated>2023-08-29T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/14741</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/14741/"><![CDATA[<h3 id="course-evaluation-final-grade-a">Course Evaluation (Final grade: A)</h3> <p>This course is structured for those who have minimal or some previous experience in computer security. It covers a broad spectrum of topics and also delves deeply into each area. The exams present a considerable challenge, and the lab requires effort, depending on the student’s prior knowledge in security. Despite having studied information security and software security during my undergraduate studies, I found the labs in this course particularly engaging. Some topics, like cryptocurrency, privacy, and security management, were especially intriguing and somewhat new to me, adding a fresh perspective to my learning experience.</p> <h3 id="reference-book">Reference Book</h3> <h4 id="security-engineering-a-guide-to-building-dependable-systems-by-ross-j-anderson">Security Engineering: A Guide to Building Dependable Systems, by Ross J. Anderson</h4> <h2 id="blog-chapters"><strong>Blog Chapters</strong></h2> <ol> <li><a href="#topic-1">Chapter 1: Thread Model &amp; Basic Concepts of Information Security</a></li> <li><a href="#topic-2">Chapter 2-1: Access Control</a></li> <li><a href="#topic-3">Chapter 3:</a></li> <li><a href="#topic-4">Chapter 4: Cypto</a></li> </ol> <h2 id="chapter-1-basic-concepts-of-information-security-"><strong>Chapter 1: Basic Concepts of Information Security</strong> <a name="topic-1"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h3 id="what-is-security">What is security?</h3> <h3 id="overview-of-topics-covered">Overview of Topics Covered</h3> <ul> <li>Foundations &amp; crypto</li> <li>Access Control</li> <li>Network and web sec</li> <li>Software sec</li> <li>crypto app</li> <li>Human and socio-eco factors</li> </ul> <h4 id="secrecy-privacy-and-confidentiality">Secrecy, privacy, and confidentiality</h4> <ul> <li>Privacy: keeping personal information secret</li> <li>Confidentiality: obligation to preserve someone else’s information secret</li> <li>Secrecy: effect of mechanisms used to limit the number of principles who can access information</li> </ul> <h4 id="data-integrity">Data integrity</h4> <ul> <li>Protect message contents <h4 id="identification">Identification</h4> </li> <li>Identify oneself to the system</li> <li>Can by pseudonymous <h4 id="anonymity">Anonymity</h4> </li> <li>Alice decided to use Tor to browse websites anonymously <h4 id="authentication">Authentication</h4> </li> <li>Authenticate the letter I received is from X <h4 id="non-repudiation">Non-repudiation</h4> </li> <li>Assurance that someone cannot deny something</li> </ul> <h4 id="authorization-certification-access-control-revocatio-witnessing">Authorization, certification, access control. revocatio, witnessing</h4> <ul> <li>Witnessing: verifying the creation or existence of information by an entity other than creator.</li> <li>Revocation: Retraction of certification or authorization</li> </ul> <h4 id="freshness--age">Freshness &amp; AGE</h4> <ul> <li>Freshness: proof that an event occurred after a given point in time</li> <li>Age: Proof that an event occurred before a given point in time</li> </ul> <h4 id="mechanisms-to-achieve-freshness-and-age">Mechanisms to achieve freshness and age</h4> <ul> <li>Timestamp</li> </ul> <h4 id="availability">Availability</h4> <h3 id="security-analysis">Security analysis</h3> <ul> <li>Consider computer systems at the doctor’s office</li> <li>Target system? Enumerate assets &amp; value, Operating Value, Replacement cost</li> <li>Adversaries?</li> <li>Security requirements?</li> <li>Effective Security Approach?</li> </ul> <h3 id="approaches-to-security">Approaches to security</h3> <ul> <li>Social norms: socially unacceptable for some behaviors</li> <li>Legal enforcement: laws</li> <li>Economics: attack is too costly</li> </ul> <h3 id="technological-approaches">Technological approaches</h3> <ul> <li>Keep bad people at bay</li> <li>Strong lines of defense: cryptography, firewall, …</li> <li>Redundancy: Availability, multiple paths</li> <li>Detection: can be used as a feed to legal system</li> <li>Preemptive strike: ptp file sharing network poisoning</li> <li>Recovery: Backups</li> </ul> <h3 id="security-engineering">Security Engineering</h3> <ul> <li>Practice is important!</li> </ul> <h2 id="threat-model">Threat Model</h2> <h4 id="stride---different-types-of-attacks">STRIDE - different types of attacks</h4> <h4 id="security-properties">Security Properties</h4> <h4 id="example---security-of-atm">Example - security of ATM</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>People --------card info--------&gt; Bank

Create PIN:
1. PIN verification key to get a natural PIN from an acct number (using like DES)
2. The user's selected pin is combined with the natrual pin to get the PIN offset
3. PIN offset is stored on the bank side
4. Without the pin verification key, the attacker wouldn't get the natural pin

PIN verification key + Account number
               |
               V
            Natural PIN      User's pin
                |               |
                -----------------
                        |
                        V
                    PIN offset


Verify PIN:
1. Re-compute Pin offset using acct number and user's pin
2. Compare it with the stored one

Do we send user's pin through the network? NO

Enc(Pin enc key, pin) ----&gt; Enc(Pin enc key, pin)
Bank then can decrypt to get the actual pin, and compute

Terminal or hardware is trusted, with its own key.
Working keys to allow transactions with foreign banks
Zone keys

It still fails... (Ross Anderson, 1993)

Security by obsecurity not correct
(reliance on secrecy as the main method of providing security to a system or component, specifically in security engineering, whether on design or implementation.)

Policies are important!
- In the US, custormer bears almost no responsibility in the charges incurred


Insider Attacks
Backer's ability to issue a 2nd card
- Could even conceal withdrawals in some cases

Outsider attacks
- Postal interception of cards and PINs
- Replay attacks
- Test transactions
- False terminals
- Fake slots
- Wireless camera


Guessable PINs
Complex fraud


• Security by obscurity
• No prior experience available
• Result: Threat model was wrong
Focused on what could possibly go wrong
• Relatively complex key system to ensure secrecy
• Should have focused on what was likely to go wrong
• Human error rendering cryptosystem useless 
• Should consider both human and tech. factors


Recommendations
• Get inspiration from safety-critical systems
• List all possible failure modes
• Document which strategy is used to make each failure mode impossible
• Review the proposed implementation of strategies by many experts
• Certification required to ensure properly trained personnel is in charge of maintenance of cryptosystem


Possible strategies
• Formal verification
    • Similar to the railway system 
    • Used in cryptology
• Feedback loop failure analysis and design guidelines 
    • Similar to avionics
    • E.g., wireless security: WEPà802.11i 
• More reading
    • Chip and pin
    • http://www.cl.cam.ac.uk/research/security/banking/


Did we learn the lessons?
• EMV: Why Payment Systems Fail
• 24 years later – same author (Ross Anderson, adding Steven J. Murdoch)
• Chip and pin/signature cards
• Yes cards: copy chip certificate and say “yes” to any PIN
• Can defeat with online transaction verification (requires chip to verify transaction details) or Dynamic Data Authentication (requires crypto processor in chip)
• Side-effect: PIN use in stores made it easier to create magnetic strip cards and steal from ATMs


</code></pre></div></div> <h2 id="boolean-attack-tree">Boolean attack tree</h2> <ul> <li>Listing all possible failure modes <h2 id="parameterized-attack-tree">Parameterized attack tree</h2> </li> <li>Can be used to assess the cost of an attack</li> <li>Can use other quantities (e.g., probabilities) instead <h2 id="practical-attack-tree">Practical attack tree</h2> </li> <li>Generally multi-parameter</li> <li>Probabilities</li> <li>Monetary cost</li> <li>Combination of continuous and boolean parameters</li> <li>Requires special equipment/knowledge…</li> <li>Needs to be correlated with knowledge about attackers to be useful 　</li> </ul> <h2 id="stride">STRIDE</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>• Six categories
• Spoofing of user identity
• Tampering
• Repudiation
• Information disclosure (privacy breach or data leak) 
• Denial of service (D.o.S)
• Elevation of privilege
</code></pre></div></div> <h2 id="chapter-2-1-access-control-"><strong>Chapter 2-1: Access Control</strong> <a name="topic-2"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h4 id="problem-resources-need-to-be-shared-and-protected">Problem: Resources need to be shared and protected</h4> <h4 id="how-do-we-regulate-access">How do we regulate access?</h4> <ul> <li>Saltzer-Schroeder</li> </ul> <h4 id="access-control">Access Control</h4> <ul> <li>Principal makes a request for an object</li> <li>Reference monitor grants or denies the request <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(authentication) -&gt; Principal -&gt; Do sth -&gt; Reference monitor(authorization) -&gt; Object
</code></pre></div> </div> <h4 id="entity-authentication-not-message-authentication">Entity Authentication (Not message authentication)</h4> </li> <li>Determining if an entity, in fact, who they claim to be.</li> <li>A cryptographic authentication protocol provides: Entity authentication, authenticated key establishment, or both!</li> <li>Can be unilateral or mutal(Both verified each other)</li> </ul> <h4 id="authentication-factors">Authentication Factors</h4> <ul> <li><strong>Knowlege</strong>: can be shared, forgotten, guessed [pwd, id, pin]</li> <li><strong>Possesson</strong>: can be shared, duplicated, or stolen [smart card, electronic key]</li> <li><strong>Inherence</strong>: difficult to share, false positives and false negatives possible, forging difficult [fingerprint, face, voice print]</li> </ul> <h4 id="single-sign-on-sso">Single sign-on (SSO)</h4> <ul> <li>authenticate once</li> <li>no need to re-authenticate for each resource from a service provider</li> <li>users now need one credential</li> <li>subsequence access credentials or data stolen are created for later identity representation</li> </ul> <h4 id="risks-or-threat">Risks or threat?</h4> <h4 id="types-of-sso">Types of SSO</h4> <ul> <li>Credential Manager: helps users manage pwds or other keys</li> <li>Enterprise SSO: provides access to resources controlled by a single administrative domain</li> <li>Federated Identity Systems: authentication across different administrative domains</li> </ul> <h4 id="goals-of-access-control-to-prevent">Goals of Access Control: To Prevent</h4> <ul> <li>Unauthorized information release, modification, DOS…</li> </ul> <h4 id="access-control-policy-vs-mechanism">Access control Policy vs Mechanism</h4> <ul> <li>Policy is a specification of who can access what, when, (under which condition)?</li> <li>Organizing policy approaches are models</li> <li> <ul> <li>Discretionary = users can give access to each other</li> </ul> </li> <li> <ul> <li>Mandatory = admin sets policy</li> </ul> </li> <li> <ul> <li>Role-based access control = all policies specficed via roles</li> </ul> </li> <li>Mechanism makes it possible to implement policy</li> </ul> <h4 id="trusted-computing-base-tcb">Trusted Computing Base (TCB)</h4> <ul> <li>The set of components that must function properly for the system to be secure</li> <li>Must be as small as possible</li> <li>Failure of TCB may result in additional access being granted</li> </ul> <h4 id="why-is-access-control-complicated">Why is access control complicated?</h4> <ul> <li>Can Alice access file X?</li> <li>Can alice change whi is authorized to have access to file X? -&gt; Access control policy of access control policy…</li> </ul> <h4 id="principles-for-access-control-13"><strong>Principles for access control (1/3)</strong></h4> <ul> <li>(Saltzer and Schroeder, 1975)</li> <li><strong>Economy of mechanism</strong></li> <li> <ul> <li>Keep if Simple, Stupid!</li> </ul> </li> <li> <ul> <li>Any design or implementation error may break the entire ystem</li> </ul> </li> <li> <ul> <li>3 lines of code are easily verified</li> </ul> </li> <li><strong>Fail safe defaults</strong></li> <li> <ul> <li>WHen in doubt, deny access</li> </ul> </li> <li><strong>Complete mediation</strong></li> <li> <ul> <li>Every access to every object must be checked for authority</li> </ul> </li> <li><strong>Open Design</strong></li> <li> <ul> <li>See Kerckhoff’s principle</li> </ul> </li> <li> <ul> <li>Do not hide security strategies</li> </ul> </li> <li><strong>Privilege Seperation</strong></li> <li> <ul> <li>Ask two principals to unlock the mechanism</li> </ul> </li> <li> <ul> <li>Avoids single points of failure</li> </ul> </li> <li><strong>Least Privilege</strong></li> <li> <ul> <li>Every program and every user of the system should operate using the least set of privileges necessary to complete the job</li> </ul> </li> <li><strong>Least common mechanism</strong></li> <li> <ul> <li>Minimize the amount of shared info</li> </ul> </li> <li><strong>Psychological acceptability</strong></li> <li> <ul> <li>Make it easier for users to use the system properly, orthersie they are likely to incorrectly use the protection mechanisms</li> </ul> </li> </ul> <h4 id="simple-access-control-policies">Simple access control policies</h4> <ul> <li>Unprotected</li> <li>Completion isolation, each user is a sandbox</li> <li>Controlled sharing, who can access in which conditions</li> </ul> <h4 id="other-variations">Other variations</h4> <ul> <li>Access only to statistical data</li> <li>Access based on clearance levels, static labeling of resources</li> </ul> <h4 id="a-simple-isolation-mechanism">A Simple Isolation Mechanism</h4> <ul> <li>TCB? Is the memory part of the TCB? We trust the memory.</li> <li>What about processor? We trust the processor.</li> <li>The supervisor program? Yes, otherwise we can’t have isolation mechanism</li> <li>Access Control of access control. Nobody should be able to tamper it.</li> </ul> <h4 id="shared-information">Shared Information</h4> <ul> <li>Not practical for perfect isolation</li> <li> <ul> <li>databases</li> </ul> </li> <li>Use libraries</li> <li> <ul> <li>saves space..</li> </ul> </li> </ul> <h4 id="access-matrices">Access Matrices</h4> <ul> <li>(User, Resoures, Access)</li> <li>User (principal)</li> <li>ACL, access control list</li> </ul> <h4 id="unix">Unix</h4> <ul> <li>d rwx rwx rwx</li> <li>directory, user, group, other</li> <li>Special bits: setuid, setgid, t-bit (x-&gt;s, x-&gt;s, x-&gt;t)</li> <li>UID=0, Superuser(as convention)</li> </ul> <h4 id="suid-sgid">SUID, SGID</h4> <ul> <li>A program needs low-level access, but the programmer makes it suid root…</li> <li>Program: program crashed, and leaves a “core dump”</li> <li>The core file is owned by root</li> <li>THe core filer is readable by “world”</li> </ul> <h4 id="sticky-bit">Sticky-bit</h4> <ul> <li>Prevents file deletion or renaming in that directory</li> <li>Useful?</li> <li>Be careful that someone can still modify the contents of the file in that directory!</li> <li>Superuser can still forcese</li> </ul> <h4 id="access-control-in-windows">Access Control in Windows</h4> <ul> <li>NT4, similar to UNIX, but with added flags(take ownership, delete, change permissions)</li> </ul> <h4 id="capabilities">Capabilities</h4> <ul> <li>row in ACL, sam can do *** for OS, Accounts program, data, …</li> <li>The user has a list of the access rights, which is unforgeable</li> <li>Trusted party signs a ticket giving you rights to certain resources</li> <li>THe user presemts the ticket to reference monitor when attempting an access</li> <li>A resource must still keep a list of what capabilities(roles) can access the resource, more complex than ACL</li> <li>vs ID-Based Protection: ticket oriented, regardless of identity of ticket holder</li> <li> <ul> <li>Tickets must be unforgeable</li> </ul> </li> <li>ID-based: identities need to be checked</li> <li> <ul> <li>After ID verification, authorization verification, access is granted</li> </ul> </li> <li> <ul> <li>Authorization lists held by object guard</li> </ul> </li> <li> <ul> <li>Identities must be unspoofable</li> </ul> </li> </ul> <h4 id="acl-vs-capabilities">ACL vs Capabilities</h4> <ul> <li>Revocation of one subject: Resources-based require change the columns in the ACL, but Capabilities require change of all objects</li> <li>Revocation of one subject is hard for ACL, as one subject has multiple objects. Similar for Capabilities.</li> <li>Giving access to new subjects: Update relevant objects for ACL, Issue new caps for capabilities is easy</li> </ul> <h4 id="discretionary-access-control-vs-mandatory-access-control">Discretionary Access Control vs Mandatory Access Control</h4> <ul> <li>Unix vs secret,top secret…</li> </ul> <h4 id="role-based-access-control">Role-based access control</h4> <ul> <li>Giving roles, not users</li> </ul> <h4 id="bell-lapadula-model">Bell-LaPadula model</h4> <ul> <li>No read up</li> <li>No write down</li> <li>Noninterference: information at a higher level is invisible at a lower level</li> <li>(Probabilistic) Nondeducibility: someone at a low level cannot deduct with 100% probability what happens at a high level</li> </ul> <h4 id="blp-upside-down-biba">“BLP upside down”, Biba</h4> <ul> <li>Integrity is the dual of confidentiality</li> <li>Care more about the Integrity</li> <li>Only read up</li> <li>Only write down</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Windows Vista, no longer used
- read-down, write-down, what issue?
- System file may read something that can be malware!
</code></pre></div></div> <ul> <li>Biba along is not sufficient!</li> </ul> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h2 id="chapter-4-crpto-"><strong>Chapter 4: Crpto</strong> <a name="topic-4"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h4 id="study-of-cyptology-is-study-of-cryptographymaths--and-cryptanalysis">study of Cyptology is study of Cryptography(Maths, ..) and Cryptanalysis</h4> <h4 id="cryptography">Cryptography</h4> <ul> <li>major policy takeaway points</li> <li>security by obscurity X</li> </ul> <h4 id="findings">Findings</h4> <ul> <li>Humans are generally risk-averse when it comes to gains</li> <li>Humans generally risk-seeking when it comes to losses</li> </ul> <h4 id="information-technology-policy">Information technology policy</h4> <ul> <li>Many entities involved</li> </ul> <h4 id="export-control">Export Control</h4> <ul> <li>considered as a weapon</li> <li>dangerous states</li> </ul> <h4 id="wassebaar">Wassebaar</h4> <ul> <li>Dual use good</li> <li>Control export of weapon</li> <li>Modifications: add intrusion software to export-controlled goods</li> </ul> <h4 id="application-binary-interface">Application binary interface</h4> <ul> <li>x86-64 stack</li> </ul> ]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Info Sec - INI]]></summary></entry><entry><title type="html">Computer Systems - Currently Updating…</title><link href="https://ychen884.github.io/blog/2023/15513/" rel="alternate" type="text/html" title="Computer Systems - Currently Updating…"/><published>2023-08-29T11:00:00+00:00</published><updated>2023-08-29T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/15513</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/15513/"><![CDATA[<h3 id="course-evaluation-final-grade-a">Course Evaluation (Final grade: A)</h3> <p>This course is structured for those who have minimal or some previous experience in computer security. It covers a broad spectrum of topics and also delves deeply into each area. The exams present a considerable challenge, and the lab requires effort, depending on the student’s prior knowledge in security. Despite having studied information security and software security during my undergraduate studies, I found the labs in this course particularly engaging. Some topics, like cryptocurrency, privacy, and security management, were especially intriguing and somewhat new to me, adding a fresh perspective to my learning experience.</p> <h2 id="blog-chapters"><strong>Blog Chapters</strong></h2> <ol> <li><a href="#topic-1">Chapter 1: Binary, Bits, and Integers</a></li> <li><a href="#topic-2">Chapter 2: Machine Prog: Basics</a></li> <li><a href="#topic-3">Chapter 3: Data</a></li> <li><a href="#topic-4">Chapter 3: </a></li> </ol> <h2 id="chapter-1-binary-bits-and-integers-"><strong>Chapter 1: Binary, Bits, and Integers</strong> <a name="topic-1"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h3 id="binary-representation">Binary Representation</h3> <ul> <li>Operations represented by bits</li> <li>Simple numbers</li> </ul> <h3 id="hexadecimal-and-octal">Hexadecimal and Octal</h3> <ul> <li>Writing binary takes too much digits</li> <li>Dense representation</li> <li>00 to FF</li> <li>0 to 9; A to F</li> <li>C language: prefix using 0x to represent hexdecimal</li> <li>Formal convention</li> </ul> <h1 id="bits-bytes-and-integers">Bits, Bytes, and Integers</h1> <ul> <li>Boolean Algebra</li> <li>Operate on Bit Vectors: And, Or, Not, Xor</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Examples:
<span class="p">
-</span> ~0x41 -&gt; 0xBE
<span class="p">-</span> - 01000001 -&gt; 10111110 -&gt; 0xBE
<span class="p">-</span> ~0x00 -&gt; 0xFF
<span class="p">-</span> 0x69 &amp; 0x55 -&gt; 0x41
<span class="p">-</span> 0x69 | 0x55 -&gt; 0x7D<span class="sb">


</span>&amp;, |, ^, ~ in C<span class="sb">


    0110 1001
</span><span class="gh">&amp;   0101 0101
------------------
</span>    0100 0001<span class="sb">


    0110 1001
</span><span class="gh">|   0101 0101
------------------
</span>    0111 1101
</code></pre></div></div> <ul> <li>Contrast Bit-level operators: <strong>&amp;&amp;, || and !</strong> in C</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 is false, non-zero as true
always return 0 or 1 
Early termination

Example:
!0x41 -&gt; 0x0
0x69||0x55 -&gt; 0x01
p &amp;&amp; <span class="err">*</span>p (avoid null pointer access)

</code></pre></div></div> <ul> <li>Shift Operations</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Left Shift x &lt;&lt; y
Fill with 0's on right
Right Shift x &gt;&gt; y
<span class="p">-</span> Logical shift
Fill with 0's on the left
<span class="p">-</span> Arithmetic shift
Relicate most significant bit on left
<span class="p">-</span> Undefined Behavior
Shift amound <span class="nt">&lt;</span> <span class="err">0</span> <span class="na">or</span> <span class="nt">&gt;</span> word size - 1
<span class="p">
-</span> How does compiler decide? 
</code></pre></div></div> <ul> <li>Integer values</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>What happens if we add 1 to 7 for three bits representation?
<span class="p">-</span> overflow, modulus arithmetic 
<span class="p">
-</span> Unisigned and Non-negative Integers
<span class="p">-</span> Negative numbers? First bit as signed bit 
<span class="p">    -</span> 0 represent 0 
<span class="p">    -</span> can 0 equal negative 0? 
<span class="p">    -</span> we want -1 + 1 eq 0
<span class="p">-</span> Trick
    1 is 1
    -1 + 1 = 0
    001 + 111 = 1000 -&gt; zero by overflow
    110 + 010 = 1000 (2+(-2)) = 0
    -2 + 5 =  1011 = 011; just bits!
<span class="p">
-</span> Finding -x the easy way
    Flip all the bits, and add 1
    -x = ~x + 1
    (two's complement)
<span class="p">
-</span> C does not mandate using two's complement
    But most machines do, and we will assume so
<span class="p">
-</span> Numeric Ranges:
    0 ~ 2^w - 1
    -2^w-1 ~ 2^w-1 -1 
<span class="p">
-</span> Signed and Unisgned in C
    int tx, ty;
    unsigned ux, uy;
    -1 compared to unisgned 0? 
    negative one is greater! Implicitely cast things to unsigned.
    
    if 2147483648U is converted as signed, converted to negative
<span class="p">
-</span> Signed Extension:
    01010 -&gt; 001010
    11010 -&gt; 111010
<span class="p">    -</span> sign extension for signed, zeros added for unsigned
<span class="p">
-</span> Truncation:
    Converting to fewer number of bits
<span class="p">    -</span> Just truncating bits, may cause value changes
    11010 -&gt; 1010 (no sign change)
    01010 -&gt; 1010 (sign change)
<span class="p">    
-</span> Unsigned Additon
    Straight forward, add bits with carry, discard overflowed bit
    (can get the bit back, but in default in C it is discarded)<span class="sb">

    One overflow

</span><span class="p">-</span> Two's complement Addition
    Same behavior, if convert to unsigned, add together and then convert back to signed<span class="sb">

    two overflows: negative &amp; postive overflows


</span><span class="p">-</span> To maintain the exact results
    Some arbitrary precision packages
<span class="p">
-</span> Power of 2 same as shifting
    let compiler do it

</code></pre></div></div> <h4 id="byte-ordering">Byte Ordering</h4> <ul> <li>Why convention Big Endian or Little Endian?</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Example
0x01234567

Memory address increases -&gt;

Big Endian:
01 23 45 67

Little Endian
67 45 23 01

</code></pre></div></div> <h4 id="important-notes">Important notes</h4> <ul> <li>Bits are not reversed, as the low order bit is the reference point.</li> <li>Doesn’t affect chars, or strings (arrays of chars), as chars are only one byte</li> </ul> <h2 id="chapter-2-1-machine-programming-basics-"><strong>Chapter 2-1: Machine Programming: Basics</strong> <a name="topic-2"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h4 id="intel-x86-processors">Intel x86 Processors</h4> <ul> <li>x86 is a complex instruction set compter</li> <li>compare: RISC (reduced), which has very few instructions, can be quite fast(Intel still wins on speed), RISC renaissance(ARM), especially for low power</li> <li>Why Intel faster? Still runs RISC inside, internally the same</li> </ul> <h4 id="level-of-abstraction">level of abstraction</h4> <ul> <li>C vs Assembly vs Computer Design <h4 id="definitions">Definitions</h4> </li> <li>Architecture: The parts of a processor design that one needs to understand for writing machine code</li> <li>Microarchitecture: Implementation of the architecture</li> <li>Code Forms:</li> <li> <ul> <li>Mahine code: byte-level programs that a processor executes</li> </ul> </li> <li> <ul> <li>Assembly Code: A text representation of machine code</li> </ul> </li> </ul> <h4 id="assemblymachine-code-view">Assembly/Machine Code View</h4> <ul> <li>Programmer-Visible State</li> <li> <ul> <li>CPU(Registers, Program counter(Rip in x86-64), Condition codes) &lt;—-&gt; Memory (Code, Data, Stack)</li> </ul> </li> </ul> <h4 id="assembly-data-types">Assembly: Data Types</h4> <ul> <li>Integer: 1,2,4,8 bytes</li> <li>Floating point data of 4,8,10 bytes</li> <li>SIMD vecter data types of 8,16,32,64 bytes</li> <li>Code: Byte sequences encoding series of instructions</li> <li>ops, src, dst</li> </ul> <h4 id="registers">Registers</h4> <h5 id="ia-32-registers">IA 32 registers</h5> <ul> <li>eax, ecx, edx, ebx, esi, edi, esp, ebp</li> </ul> <h4 id="moving-data">Moving Data</h4> <ul> <li>movq source, Dest</li> <li>Constant integer data $0x400, $-533</li> <li>Register %rax,</li> <li>Memmory: 8 consecutive bytes of memory at address given by register. Simplest example: (%rax)</li> <li><strong>Cannot do memory-memory transfer with a single instruction!</strong> ``` Examples: movq $0x4,%rax temp = 0x4; movq $-147,(%rax) *p = -147; movq %rax,%rdx temp2 = temp1; movq %rax,(%rdx) *p = temp; movq (%rax),%rdx temp = *p;</li> </ul> <p>Mem[Reg[R]+D]: movq 8(%rbp),%rdx Mem[Reg[Rb]+S*Reg[Ri]+ D]:</p> <ul> <li>D: Constant “displacement” 1, 2, or 4 bytes</li> <li>Rb: Base register: Any of 16 integer registers</li> <li>Ri: Index register: Any, except for %rsp</li> <li>S: Scale: 1, 2, 4, or 8 (why these numbers?) jump number of bytes, array of element of specific size</li> </ul> <p>Special Cases (Rb,Ri) Mem[Reg[Rb]+Reg[Ri]] D(Rb,Ri) Mem[Reg[Rb]+Reg[Ri]+D] (Rb,Ri,S) Mem[Reg[Rb]+S*Reg[Ri]]</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

&lt;!-- 
- %rax / %eax
- %rbx / %ebx
- %rcx / %ecx
- %
- %
- %
- %
- %
 --&gt;


#### Address Computation Instruction
- leaq Src, Dst
</code></pre></div></div> <p>leaq (%rdi,%rdi,2), %rax # t = x+2*x salq $2, %rax # return t«2</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#### GDB view - activity 1

</code></pre></div></div> <p>rdi 0x1 1 rsp 0x7fffffffe650 0x7fffffffe650 rax 0x4f 79</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- By convention, %rax is used to store a function’s return value
- %rdi, %rsi, %rdx, %rcx, %r8, and %r9 are used to pass the first six integer or pointer parameters to called functions. Additional parameters (or large parameters such as structs passed by value) are passed on the stack.
- %rsp is used as the stack pointer, a pointer to the topmost element in the stack.



### Which numbers are pointers?
- rsp and rip always hold ptrs
- Register values that are "close" to these are probably also ptrs


#### CF ZF SF OF Condition codes
Single bit registers
- CF Carry Flag (for unsigned) SF Sign Flag (for signed)
- ZF Zero Flag OF Overflow Flag (for signed)
- GDB prints these as one “eflags” register

</code></pre></div></div> <p>CF set if carry out from most significant bit (unsigned overflow) ZF set if t == 0 SF set if t &lt; 0 (as signed) OF set if two’s-complement (signed) overflow (a&gt;0 &amp;&amp; b&gt;0 &amp;&amp; t&lt;0) || (a&lt;0 &amp;&amp; b&lt;0 &amp;&amp; t&gt;=0)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#### cmp a, b
- Computes 𝑏 − 𝑎 (just like sub)
- Sets condition codes based on result, but…
- Does not change 𝒃

</code></pre></div></div> <p>jX Condition Description jmp 1 Unconditional je ZF Equal / Zero jne ~ZF Not Equal / Not Zero js SF Negative jns ~SF Nonnegative jg ~(SF^OF)&amp;~ZF Greater (Signed) jge ~(SF^OF) Greater or Equal (Signed) jl (SF^OF) Less (Signed) jle (SF^OF)|ZF Less or Equal (Signed) ja ~CF&amp;~ZF Above (unsigned) jb CF Below (unsigned)</p> <p>▪ Set low-order byte of destination to 0 or 1 based on combinations of condition codes ▪ Does not alter remaining 7 bytes SetX Condition Description sete ZF Equal / Zero setne ~ZF Not Equal / Not Zero sets SF Negative setns ~SF Nonnegative setg ~(SF^OF)&amp;~ZF Greater (Signed) setge ~(SF^OF) Greater or Equal (Signed) setl (SF^OF) Less (Signed) setle (SF^OF)|ZF Less or Equal (Signed) seta ~CF&amp;~ZF Above (unsigned) setb CF Below (unsigned)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#### Using Conditional Moves
- can be bad: dup calc, unsafe, side-effects
- ?:


</code></pre></div></div> <p>Expensive Computations Bad Cases for Conditional Move  Both values get computed  Only makes sense when computations are very simple val = Test(x) ? Hard1(x) : Hard2(x); Risky Computations  Both values get computed  May have undesirable effects val = p ? *p : 0; Computations with side effects</p> <ul> <li>Both values get computed</li> <li>Must be side-effect free ```</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Stack bottom (increasing addresses)


stk ptr -&gt; 
Stack top (decreasing addresses, stk grows down)


</code></pre></div></div> <ul> <li>pushq src: fetch operand at src, decrement %rsp by 8, and write operand at address given by %rsp</li> <li>pop: value is copied, in remains in memory at old %rsp</li> <li>ret knows where to go back: pop address from stack, and jump to address</li> </ul> <h4 id="procedure-data-flow">Procedure data flow</h4> <ul> <li>first 6 arguments: rdi, rsi, rdx, rcx, r8, r9</li> <li> <p>return value: rax</p> </li> <li>Stack: only allocate stack space when needed <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Arg N
Arg N-1
...
Arg 2
Arg 1
</code></pre></div> </div> </li> <li>why not directly calc, sometimes use indirect registers for calc? may not maintain vals</li> <li>optional rbp for frame pointer. Most of the time the compiler can figure out the frame size. If compiler cannot find the frame size, it will use rbp.</li> </ul> <p>Stack frame</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Caller Frame(Arguments 7+, then return address)
Old rbp (optional)
saved registers and local variables
argument build (optional)
rsp
</code></pre></div></div> <p>leaq 8(%rsp), %RDI COMPUTES rsp + 8</p> <h4 id="register-saving-converntions">Register Saving Converntions</h4> <ul> <li>Caller saved: temporary vals saved in its frame before the call</li> <li>Callee Saved: rbx, r12, r13, r14, rbp</li> </ul> <h4 id="obs-of-recursion">Obs of recursion</h4> <ul> <li>handled without special consideration</li> <li>stack franes mean private storage</li> <li>saved registers, local vars and return ptr</li> <li>registers saving prevent one function call from corrupting another’s data</li> </ul> <h4 id="also-works-for-mutual-recursion-p---q">also works for mutual recursion P &lt;-&gt; Q</h4> <h4 id="procedure-summary">Procedure Summary</h4> <ul> <li>Stack for procedure call/return</li> <li>Recursion handled by normal converntions</li> <li>Pointers are addresses of values on stack or global</li> </ul> <h2 id="chapter-3-data-"><strong>Chapter 3: Data</strong> <a name="topic-3"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h4 id="reminder-memory-organization">Reminder: Memory Organization</h4> <ul> <li>data type and size</li> <li>ints(floats): 4000,4001,4003,4004</li> <li>longs(doubles): 4000-4007</li> </ul> <h4 id="array-allocation">Array Allocation</h4> <ul> <li>char string [12], int val[5]…contiguously allocated</li> <li>char *p[3]: pointers to characters. Depends on machines. 64 bit assembly, therefore 8 byte for each pointer: [x,x+7], x+8, x+16, x+24…</li> </ul> <h4 id="array-access">Array Access</h4> <ul> <li>if val[4] with int type int, int val[4]: x, x+4, x+8, … x+20</li> <li> <ul> <li>val[5] has val ??</li> </ul> </li> <li> <ul> <li>*(val+3) == val[3]</li> </ul> </li> <li> <ul> <li>val is int * with value x</li> </ul> </li> <li> <ul> <li>&amp;val[2] == val+2 == x+8</li> </ul> </li> <li> <ul> <li>val + i == x+4*i</li> </ul> </li> </ul> <h4 id="multiple-arrays">Multiple arrays</h4> <ul> <li>Not guarantee to be consecutive for different arrays in memory</li> </ul> <h4 id="int-arr-vs-int-arr-vs-int-arr-">int arr[] vs int <em>arr[] vs int (</em>arr) []</h4> <h4 id="multidimensional-arrays">Multidimensional Arrays</h4> <ul> <li>R * C * sizeof(T) bytes</li> <li>consecutive R arrays, each of them with C elements</li> <li>A[i] -&gt; A + i * (C * sizeof(T))</li> <li>A[i][j] -&gt; A + i * (C * K) + j * K -&gt; A + (i * C + j) * K: exactly what the assembly does</li> <li>int *univ[ucount] = {mit, cmu, ucb}</li> <li> <ul> <li>Mem[Mem[univ+8 * index]+4 * digit]</li> </ul> </li> </ul> <h4 id="structures--alignment">Structures &amp; Alignment</h4> <ul> <li>int: multiple of 4</li> <li>double: multiple of 8</li> <li>char:1, short:2, float,int:4, long,double,char*: 8</li> <li>Important: overall struct needs to be aligned - biggest element in the struct</li> <li>end struct *p with multiple of 8 with char, int and double</li> </ul> <p>#####</p> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> ]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Computer Science - 213/513]]></summary></entry><entry><title type="html">Compiler Design - Currently Upating…</title><link href="https://ychen884.github.io/blog/2023/15661/" rel="alternate" type="text/html" title="Compiler Design - Currently Upating…"/><published>2023-08-28T11:00:00+00:00</published><updated>2023-08-28T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/15661</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/15661/"><![CDATA[<h3 id="course-evaluation-final-grade-na">Course Evaluation (Final grade: N/A)</h3> <p>I will add my course evaluation at the end of this semester.</p> <h3 id="paper-reviews">Paper reviews</h3> <p>I will upload my paper reviews here later.</p> <h3 id="reference-book">Reference Book</h3> <h4 id="computer-networking-7th-edition-james-kurose-and-keith-ross">Computer Networking 7th Edition, James Kurose, and Keith Ross</h4> <h2 id="blog-chapters"><strong>Blog Chapters</strong></h2> <ol> <li><a href="#topic-1">Chapter 1: Overview of Compiler Design</a></li> <li><a href="#topic-2">Chapter 2: </a></li> <li><a href="#topic-3">Chapter 3: </a></li> <li><a href="#topic-4">Chapter 4: </a></li> <li><a href="#topic-5">Chapter 5: </a></li> <li><a href="#topic-6">Chapter 6: </a></li> <li><a href="#topic-7">Chapter 7: </a></li> </ol> <h2 id="chapter-1-overview-of-compiler-design--">**Chapter 1: Overview of Compiler Design ** <a name="topic-1"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <p><a href="#blog-chapters">Back to Blog Chapters</a></p>]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Compiler Design - SCS]]></summary></entry><entry><title type="html">Fundamentals of Telecommunication Networks - Currently Upating…</title><link href="https://ychen884.github.io/blog/2023/14740/" rel="alternate" type="text/html" title="Fundamentals of Telecommunication Networks - Currently Upating…"/><published>2023-08-28T11:00:00+00:00</published><updated>2023-08-28T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/14740</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/14740/"><![CDATA[<h3 id="course-evaluation-final-grade-a">Course Evaluation (Final grade: A)</h3> <p>This course is designed for individuals with minimal or no prior knowledge of computer networks. It delves into the intricate details of various protocols. The exams are generally easy to manage, but the labs may demand a significant amount of effort. Students should be aware that they will be sharing server resources with many others, leading to potential issues with resource contention. It also includes reviews of some state-of-the-art papers in the field.</p> <h3 id="paper-reviews">Paper reviews</h3> <p>I will upload my paper reviews here later.</p> <h3 id="reference-book">Reference Book</h3> <h4 id="computer-networking-7th-edition-james-kurose-and-keith-ross">Computer Networking 7th Edition, James Kurose, and Keith Ross</h4> <h2 id="blog-chapters"><strong>Blog Chapters</strong></h2> <ol> <li><a href="#topic-1">Chapter 1: Overview of Computer Networks &amp; Architecture</a></li> <li><a href="#topic-2">Chapter 2: Design Principles</a></li> <li><a href="#topic-3">Chapter 3: </a></li> <li><a href="#topic-4">Chapter 4: HTTP, application layer</a></li> <li><a href="#topic-5">Chapter 5: DNS</a></li> <li><a href="#topic-6">Chapter 6: PTP</a></li> <li><a href="#topic-7">Chapter 7: TCP</a></li> </ol> <h2 id="chapter-1-overview-of-computer-networks-"><strong>Chapter 1: Overview of Computer Networks</strong> <a name="topic-1"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h3 id="broad-overview-of-fundamental-principles">Broad Overview of Fundamental Principles</h3> <ul> <li>Fundamentals of the protocol stack</li> <li>Networking tools &amp; protocols</li> <li>Paper reading</li> </ul> <h3 id="top-down-approach">Top-down approach</h3> <ul> <li>Applciation Layer + overlays</li> <li>Transport Layers</li> <li>Network Layers</li> <li>Data Link Layer</li> </ul> <h3 id="introduction-to-networking">Introduction to Networking</h3> <h4 id="hosts-as-ending-systems-running-network-apps">Hosts as ending systems, running network apps</h4> <ul> <li>Connected with using communication links (fiber, copper, radio, WIFI, satellite, etcs)</li> <li>Bandwidth</li> </ul> <h4 id="nuts--bolts-view">“Nuts &amp; bolts” view</h4> <ul> <li>Protocols: like TCP, IP, HTTP, UDP, DNS, ARP, etcs <h4 id="network-of-networks">Network of networks</h4> </li> <li>Loosely hierarchical</li> <li>Public vs private networks</li> <li>Internet Service Provders(ISPS) <h4 id="standards">Standards</h4> </li> <li>RFC: Request for Comments</li> <li>IETF: Internet Engineering Task Forces <h4 id="services-view">“Services” view</h4> </li> <li>Communication infrastructure, enabling distributed applications</li> <li>Communication services, provided to applications, connectionless or connection-oriented</li> </ul> <h3 id="what-is-a-protocl">What is a PROTOCL?</h3> <ul> <li>Human protocls: A-&gt;B: “What’s the time?” B-&gt;A: “12:00”</li> <li>Define the format, order of messages sent and recieved among network entities, and the actions taken on message transmission or receipt.</li> <li>All communication activity on the Internet is governed by Protocols</li> </ul> <h3 id="network-structure">Network Structure</h3> <h4 id="network-edge-hosts-running-apps-clients-and-servers">Network Edge: Hosts running apps, Clients and Servers</h4> <ul> <li>End systems(hosts): running apps, source or destination of network data</li> <li>Client/Server model: a client asks for and gets services from an “always-on” server. Web browser/Web Server</li> <li>Peer-to-peer model: Minimal use of dedicated servers. Peers host files for other peers.</li> </ul> <h3 id="connection-orientated-communication-services">Connection-orientated Communication Services</h3> <ul> <li>Goal: Reliable data transfer between end systems</li> <li>Requires handshaking before sending data</li> <li>Provides Reliability</li> <li>Example: TCP in Transport Layer</li> </ul> <h3 id="different-services-for-different-applications">Different services for different applications</h3> <ul> <li>TCP: HTTP, FTP, Telnet(remote login), SMTP(email)</li> <li>UDP: DNS, Skype(VOIP), Streaming media, Zoom(Teleconferencing)</li> </ul> <h4 id="network-cores-routers-interconnected-networks-network-of-networks">Network Cores: Routers, Interconnected Networks, “Network of networks”</h4> <ul> <li>A mesh of interconnected routers</li> <li>Circuit switching: Discrete paths, end-to-end resoures reserved for the connection, no sharing with other connections</li> <li>Network bandwidth is divided into pirces, allocated to connections, and idle if not used by the connection owner</li> <li>FDM, TDM</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TDM
 Freq   ｜｜｜｜｜｜｜
        ｜｜｜｜｜｜｜
        ｜｜｜｜｜｜｜
        TIme

FDM
Users use different freq
 Freq   -----------
<span class="p">        -----------
        -----------</span>
        TIme
</code></pre></div></div> <p>Either: Devide the available bdw / slots</p> <p>Frequency is measured by Hz. Assuming pipe is thin, so only some number of parallel bits. Additional frequency more bits, more channel less bits per time slot</p> <p>or Users use full freqs for per time slot</p> <p>example: How long does it take to send a file of 640000bits from A to B over a circuit-switched network? Each link uses TDM with 24 slots 500 msec to build the end-to-end circit All links with bandwith 1.536Mbps</p> <p>TDM splits the transmission rate among all slots, A single-circuit transmission rate is 1.536Mbps/24 = 64Kbps 10 sec + 500ms = 10.5 seconds</p> <h3 id="packet-switching-discrete-chunks-of-data-every-packet-uses-the-full-bdw-of-a-link-no-tdmfdm">Packet switching: Discrete chunks of data, every packet uses the full bdw of a link (no TDM/FDM)</h3> <ul> <li>Packet moved hop by hop, routed.</li> <li>+ Connectionless/Stateless</li> <li>+ No resource sharing</li> <li>- Resource contention: Aggregate demand can exceed available resources in the intermediate routers</li> <li>- Congestion: Packet wait in routers’ queues, waiting to user the whole link</li> <li>- Packet arrive from multiple sources</li> <li>- Packet can be dropped if demnand is too high</li> </ul> <h3 id="statistical-multiplexing">Statistical Multiplexing</h3> <ul> <li>Packets go from different sources, to the same router</li> <li>packets arrive in random/statistical order</li> </ul> <p>Pattern has to be determined by some means of statistical methods.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">    ------------</span>
----|           |
----|           |----&gt;
----|           |
    ------------|
</code></pre></div></div> <h3 id="store-and-forward-model">Store-and-forward Model</h3> <ul> <li>For a packet of L bits</li> <li>On a link of R bps throughput (bdw)</li> <li>Takes L/R seconds to transmit the packet (Transmission time)</li> <li>The entire packet (all the bits) must arrive at the router before it can be transmitted to next node.</li> <li>Example: 7.5Mb/1.5Mbps = 5 seconds</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host A ---- R bps ----&gt; Node B ----- Rbps ------&gt; Node C ---- Rbps ---&gt; Host B
All links are 1.5 Mbps
Send a 7.5 Mb file:
Time = 7.5Mb/1.5Mbps = 5 sec (ignoring propogation, queueing, setup time)
Why not 15 sec? Packet switching, we can see packet granularity helps!

If 5000 packets of each 1500 bits
Time at which the second packt reached the end: 1 msec after packet 1
Time to forward a packet in a link: 1500 bits/1.5 Mbps = 1 msec
Time at which the first packet reached the end: 3 msec
Totla time: 3 msec + 4999 <span class="err">*</span> 1 msec = 5.002 sec: nice improvements!
</code></pre></div></div> <h3 id="packet-vs-circuit-switching">Packet vs circuit switching</h3> <ul> <li>Allows more users</li> <li>Imagine a 1 Mbps link</li> <li>n users: Active 10% of the tie, using 100Kbps when active</li> <li>Max n for circuit switching: 10 users</li> <li>Max n for packet switching:</li> </ul> <p>With 40 users, the probability of &gt; 10 being active is &lt; 0.001 Calculate probability</p> <h3 id="is-packet-switching-the-answer">Is packet switching the answer?</h3> <ul> <li>+ Great for burst data</li> <li>+ Resources are shared</li> <li> <p>+ Simpler: no circuit set-up / reservations</p> </li> <li>- More packets that cannot be queued and handles</li> <li> <ul> <li>Packet delay and loss</li> </ul> </li> <li> <ul> <li>Must add protection (complexity) for reliable transmission and congestion control</li> </ul> </li> </ul> <h3 id="delay-and-loss-in-packet-switching-networks">Delay and Loss in Packet Switching Networks</h3> <h4 id="sources-of-delayloss">Sources of delay/loss</h4> <ul> <li>Before transmission, packets queue in router buffers</li> <li>Store process and forward once all the bits are received</li> <li>Packet arrival rate may exceed output capacity</li> </ul> <h4 id="delay-types">Delay types</h4> <ul> <li>Processing Delay: Time spent in the router: check for bit errors(checksums), determine the output link(next hop)</li> <li>Queueing Delay: Each output link in a router stores packets in a queue(buffer), depends on the congestion level of the router and the transmission algorithms.</li> <li>Transmission Delay: T = L/R time to transmit packet, place all the packet bits in the link</li> <li>Propagation Delay: $2.8 * 10^8$ m/s, bits travelling through a medium (fiber, wireless,..)</li> </ul> <h3 id="nodal-delay">Nodal delay</h3> <p>dproc + dqueue + dtrans + dprop =&gt; dnodal</p> <ul> <li>why queueing delay depends on network congestions? depends on statistical multiplexing. (0~few ms)</li> </ul> <h3 id="queuing-delay">Queuing delay</h3> <p>L = packet length (bits/pkt) R = link speed (bps) λ = average packet arrival rate Traffic intensity (ρ) = $L * λ / R$</p> <ul> <li>if ~ 0: average queueing delay is small</li> <li>=1: delayes become large, a small increase in traffic substantially increases the delay</li> <li>greater than 1: More packet arriving than can be processed, the average delay goes to infinity</li> </ul> <h3 id="packet-loss">Packet loss</h3> <ul> <li>queue preceding link in the router has a finite capacity</li> <li>When a packet arrives in a full queue, the packet is dropped</li> <li>A packet packet may be retransmitted by the previous node, by the source end system, not retransmited at all</li> </ul> <h3 id="real-delays">Real delays</h3> <ul> <li>Tool: traceroute provides delay measurements for each hop in the path</li> <li>For all routers i in some path:</li> <li>Send 3 packets(probes) that will reach router i on the path roward the destination</li> <li>The router i will respond to the sender</li> <li>Measure transmission and reply interval</li> <li>Info: Intermediate router, 3 delay measurements, can have different routes if congested/lost</li> </ul> <h3 id="networks-are-complex-how-to-organize">Networks are complex! How to organize</h3> <ul> <li>Many components, many layers <h4 id="what-architecture-should-be-used">What architecture should be used?</h4> </li> <li>Layered Network Architecture</li> <li>Set of layers, each of them: provides a service(defined in a protocol), specifies an interface for accessing the service</li> <li>User services of the layer direcly <h3 id="network-architecture-defines-all-the-layers-and-the-design-of-protocolsinterfaces-for-each-layer">Network architecture defines all the layers and the design of protocols/interfaces for each layer</h3> </li> </ul> <h3 id="why-layering">Why layering?</h3> <h4 id="decompose-the-complex-networking-problem-into-managable-pieces">Decompose the complex networking problem into managable pieces</h4> <ul> <li>Monolithic non-layered architectures are costly, inflexible, and soon obsolete.</li> <li>Structured way to understand</li> <li>Protocol in each layer can be developed seperately from those in other layers</li> <li>Implementation in a layer can change wihtout affecting other layers, as long as the interface remains the same</li> <li>Details not required in lower layers</li> <li>Simplifies the design, implementation and testing</li> </ul> <h3 id="why-not-layering">Why not layering?</h3> <ul> <li>Duplication of lower-layer functions, reliability at link + transport layer</li> <li>Information hiding affects performance, may require info from lower layers</li> </ul> <h3 id="iso-osi-reference-model">ISO OSI Reference Model</h3> <h3 id="iso-international-standard-organization">ISO: International Standard Organization</h3> <h4 id="osi-open-systems-interconnection-was-a-reference-framwork-to-enable-multi-vendor-interconnection-interoperability">OSI: Open Systems Interconnection was a reference framwork to enable multi-vendor interconnection (interoperability)</h4> <ul> <li>Provides a unified view of layers, services, and protocols in each layer</li> <li>Not well introduced, as TCP/IP pre-empted deployment of OSI protocols</li> </ul> <h3 id="application">Application</h3> <h3 id="presentation">Presentation</h3> <h3 id="session">Session</h3> <h3 id="transport">Transport</h3> <ul> <li>End-to-end transfer of messages (i.e., segments)</li> <li>Port numbers enable the multiplexing of various apps</li> <li>Message segmentations and reassembly</li> <li>Connection setup, maintenance, and release</li> </ul> <h3 id="network">Network</h3> <ul> <li>Transport packets across links</li> <li>Scalable addressing: Hierarchically</li> <li>Routing protocol: determine best paths..</li> <li>Example: IPv4 &amp; IPv6</li> </ul> <h3 id="data-link">Data Link</h3> <ul> <li>Transfer frames between 2 adjacent nodes (directly connected)</li> <li>A frame is a sequence of bits or blocks of information</li> <li>Inserts control, addressing, and error correction info</li> <li>Activation, maintenance, and deactivation of link connection</li> <li>Example: Ethernet, PPP, HDLC, Wi-Fi</li> </ul> <h3 id="physical">Physical</h3> <ul> <li>Transfer bits across a link</li> </ul> <h2 id="chapter-2-design-principles-"><strong>Chapter 2: Design Principles</strong> <a name="topic-2"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h4 id="layer-virtual-connection">Layer Virtual Connection</h4> <ul> <li>virtual/logical connections between peer layers</li> <li>The real conenction is physical layer</li> </ul> <h4 id="encapsulationdecapsulation">Encapsulation/Decapsulation</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(Sender) -&gt; Higher Layer -&gt; encap -&gt; Lower layer -&gt; send -&gt; Lower layer -&gt; decap -&gt; Higher layer -&gt; (Receiver)


</code></pre></div></div> <h4 id="1-is-strict-layering-implied">1. Is strict layering implied?</h4> <ul> <li>No. User Applications are free to bypass the defined transport layer and to directly use IP</li> </ul> <h4 id="2-hourglass-figure">2. “Hourglass” Figure!</h4> <ul> <li>Above IP and Below IP: lots of stuff, IP is the glue</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
------------APPS---------------
HTTP, SMTP, NTP, DHCP, DNS, SIP
--------TCP, UDP---------------
-----------IP------------------
LTE,3G, WIFI, Ethernet, DOCSIS, DSL
Radiom Coaxial, Fiber, Twisted Pair


</code></pre></div></div> <h4 id="3-ietf-internet-engineering-task-force">3. IETF, Internet Engineering Task Force</h4> <ul> <li>For a new protocol to become standard</li> <li>defailed protocol specification, tested</li> <li>2+ independent implementation</li> <li>rough consesus and running code</li> </ul> <h4 id="sidebar-request-for-comments-rfc">Sidebar: Request for Comments (RFC)</h4> <ul> <li>Every IETF standard is published as a RFC</li> <li>Not all RFCs are standards! Experimental, Information doc, Historical standards..</li> </ul> <h4 id="clark-fundamental-goal">Clark Fundamental Goal</h4> <ul> <li>Interconnect existing networks</li> <li>Store-and-forward packet-switching and adding gateways to connect them together</li> </ul> <h4 id="second-level-goal">Second Level Goal</h4> <p>• Continue despite the loss of networks or gateways • Support multiple types of communication services • Accommodate a variety of network technologies – Ethernet, ATM • Permit distributed management of its resources • Be cost-effective (?) • Account for resources used (?)</p> <h4 id="where-should-i-store-the-state-of-our-connection">Where should I store the “state” of our connection</h4> <p>• Approach # 1: In the intermediate nodes (gateways) • Requires replication of state everywhere • Difficult to build algorithms • Synchronization issues • Approach # 2: At the end-hosts • If the end host is lost, the state associated with its conversation is also lost • Much easier to engineer than replication</p> <h4 id="stateless-network-core">Stateless NEtwork Core</h4> <ul> <li>The original TCP/IP design uses approach 2</li> <li>also called datagram entwork</li> <li>end-hosts ensure reliable delivery of data</li> </ul> <h4 id="intelligence-of-internet-devices">Intelligence of Internet Devices</h4> <ul> <li>Dumb routers, just forwarding</li> <li>Smart hosts, do more: reliability, flow control, congestion conrol, buffering</li> </ul> <h4 id="types-of-services">Types of Services</h4> <ul> <li>TCP is thought to be enough, but reliability is the main source of delay!</li> <li>Tradeoffs always exist between latency and reliability</li> <li>Originally, TCP and IP were at the same layer</li> <li> <ul> <li>TCP is not always helpful! Then IP to be the basic building blocks: datagrams</li> </ul> </li> </ul> <h4 id="distributed-management">Distributed Management</h4> <ul> <li>Mostly achieved</li> <li>Networks can be administered seperately</li> <li> <ul> <li>Still a big issue</li> </ul> </li> </ul> <h4 id="accouting-of-resources">Accouting of Resources</h4> <ul> <li>Little to the original design</li> <li>TODAY: Coarse-grained tools are widely use, recent tools measure and monotor traffic based on flows, source/destination pairs</li> </ul> <h4 id="saltzer84-paper">Saltzer84 PAPER</h4> <ul> <li>end-to-end argument, eliminating dup function</li> <li>exception: performance optimization: A lower layer could implement a higher layer function if it is for improving (overall) performance</li> </ul> <h4 id="moving-away">Moving Away?</h4> <ul> <li>Operation in an unstructworthy world</li> <li>More demanding apps</li> <li>Growth of end0hosts, IOT devices</li> <li>Moving away from end-to-end argument</li> <li>Routers are getting smarter (QoS, SDN, accouting and mangement)</li> </ul> <h2 id="chapter-4http-application-layer-"><strong>Chapter 4:HTTP, application layer</strong> <a name="topic-4"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <h4 id="for-user-apps">for user apps</h4> <h4 id="abstract-details-of-the-transport-layer">Abstract details of the transport layer</h4> <ul> <li>user transport servicesL mainly TCP and UDP</li> </ul> <h4 id="application-layer--user-appliccation">Application Layer != User Appliccation</h4> <ul> <li>provides services to user appplications with the network accessibility</li> <li>Enables access to lower layers like transport layer</li> <li>Services include email, ftp, http, web accesss, telnet access on a remote host, …</li> </ul> <h4 id="tl-setup-overhead">TL setup overhead</h4> <ul> <li>It takes time to initiate and close the transport connection (handshake,..)</li> </ul> <h4 id="main-ops">Main ops</h4> <h5 id="missions">Missions</h5> <ul> <li>provide users with access to network resources</li> <li>provide services to user apps <h5 id="addressing">Addressing</h5> </li> <li>specific addressing</li> <li>domain names, email addresses, etcs <h5 id="data-type">Data type</h5> </li> <li>Messages</li> </ul> <h4 id="http-vs-https">HTTP vs HTTPs</h4> <ul> <li>With encrption or not</li> </ul> <h4 id="overview">Overview</h4> <ul> <li>Client/Server apps</li> <li>Client: browse that requests, receives and renders web objects</li> <li>Server: stores web objects and sends in response to client requests</li> <li>Generic, not considering the OS</li> </ul> <h4 id="history-lesson">History Lesson</h4> <ul> <li>0.9, original release</li> <li>1.0, RFCs for HTML and URI were publish in the same year</li> <li> <ul> <li>HTML: Format for documents that are displayed in a web browser (web pages)</li> </ul> </li> <li> <ul> <li>URI: Identity resoruces on the web</li> </ul> </li> <li>Problems:</li> <li> <ul> <li>Caching control</li> </ul> </li> <li> <ul> <li>TCP overhead for shot responses</li> </ul> </li> <li>HTTP/1.1</li> <li> <ul> <li>this will be discussed in detail in this blog</li> </ul> </li> <li>HTTP2</li> <li> <ul> <li>somwhow slow adoption rate</li> </ul> </li> <li> <ul> <li>change how data is transfered</li> </ul> </li> <li> <ul> <li>compress hreaders</li> </ul> </li> <li> <ul> <li>allow server push: for example, google server pushes the image to the client, so client does not have to ask for the logo image from the reference link</li> </ul> </li> </ul> <h4 id="html">HTML</h4> <ul> <li>Defines the meaning and structure of web contents</li> <li> <ul> <li>other tech used for appearance(CSS) or functionality(JS)</li> </ul> </li> <li>HTML uses ‘markup’ to annotate text, images, and contents for display in a web browser</li> </ul> <h4 id="web-and-http-message-format">Web and HTTP: Message Format</h4> <ul> <li>Two types of HTTP messages (identities: client c, server s):</li> <li> <ul> <li>Requests from c to s</li> </ul> </li> <li> <ul> <li>Responses from s to c</li> </ul> </li> <li> <table> <tbody> <tr> <td>Specificed in header BN format request</td> <td>response</td> </tr> </tbody> </table> </li> <li>Same generic format for request and response</li> <li> <ul> <li>Start line or status line (Request or Response)</li> </ul> </li> <li> <ul> <li>Zero or more headers</li> </ul> </li> <li> <ul> <li>An empty line</li> </ul> </li> <li> <ul> <li>A message body</li> </ul> </li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>generic-message = star-kine 
*(message-header CRLF(return))
CRLF
[message-body]
start-line = Request-line | status-line
</code></pre></div></div> <h4 id="what-are-those-headers">What are those headers?</h4> <ul> <li>dates/times</li> <li>application or server info</li> <li>caching control</li> <li>46 defined headers</li> <li>Host: is reqiured on requests</li> </ul> <h4 id="http-request-line">HTTP Request-line</h4> <ul> <li>Request-Line = Methods SP Request-URI SP HTTP-Version CRLF</li> <li> <table> <tbody> <tr> <td>Methods: “OPTIONS”</td> <td>“GET</td> <td>“HEAD</td> <td>“POST”</td> <td>“PUT”</td> <td>“DELETE”</td> </tr> </tbody> </table> </li> </ul> <h4 id="request-methods-get">Request Methods (GET):</h4> <ul> <li>“Conditional GET”: get only if a condition is met, the header would include if-modified-since, if-match, etc.</li> <li>“Partial GET”: Get only a portion of the file, the header includes a RANGE field</li> <li> <ul> <li>essential for restartale tranders such as buffering a media stream</li> </ul> </li> <li> <ul> <li>Gets only a set of bytes from the original msg</li> </ul> </li> <li>POST: upload data to a server</li> <li>HEAD: retrieve metadata about an object(validity, modification time, etc)</li> <li> <ul> <li>Same as GET but MUST NOT return a message body</li> </ul> </li> <li>OPTIONS: request info about the capabilities of the server wihtout requesting the resources</li> </ul> <h4 id="http-response-format">HTTP Response format</h4> <ul> <li> <table> <tbody> <tr> <td>start-line = request-line</td> <td>status-line</td> </tr> </tbody> </table> </li> <li>status-line = HTTP-version SP Status-Code SP Reason-Phrase CRLF</li> <li>Status Code:</li> <li> <ul> <li>1xx: Infomational, received request, continuing process</li> </ul> </li> <li> <ul> <li>2xx: Success, action successful</li> </ul> </li> <li> <ul> <li>3xx: Redirection, further action is required to complete this req</li> </ul> </li> <li> <ul> <li>4xx: Client error, request has bad syntax or cannot be fullfilled</li> </ul> </li> <li> <ul> <li>5xx: Server error, server failed to fullfill a valid request</li> </ul> </li> </ul> <h4 id="rtt-of-http-non-persistent">RTT of HTTP (non-persistent)</h4> <ul> <li>Response time = 2RTT + file transmit time</li> <li>One RTT to initiate a TCP connection</li> <li>One RTT for HTTP request and the first byte of the response</li> <li>Non-persistent HTTP: has to establish a tcp connection for each file transmission!</li> <li> <ul> <li>High overhead in terms of packets in the network</li> </ul> </li> <li> <ul> <li>Long user-perceived latency</li> </ul> </li> </ul> <h4 id="persistent-http">Persistent HTTP</h4> <ul> <li>Reuse the existing TCP connection</li> <li>Pilelining at the pplicaiton protocl level, send batched req for batched recv, for less latency (less RTTs)</li> </ul> <h4 id="web-proxy-caching">Web Proxy Caching</h4> <ul> <li>acts as both server and clients</li> <li>reduces response time for user reqs</li> <li>reduces trafic on access linkes</li> <li> <ul> <li>reduces transit cost</li> </ul> </li> </ul> <h4 id="file-consistency">File Consistency</h4> <ul> <li>HTTP ensures the correctness of caching, TTL</li> </ul> <h4 id="protocl-is-not-policy">Protocl is not Policy</h4> <ul> <li>Web cache policy is seperate from the protocol</li> <li>cache replacement…</li> </ul> <h4 id="expiration-model">Expiration Model</h4> <ul> <li>Origin server-specified expiratrion</li> <li> <ul> <li>Uses Expires header or max-age directive in Cache-Control header</li> </ul> </li> <li> <ul> <li>Recommended</li> </ul> </li> <li>Heuristic expiration</li> <li> <ul> <li>up to the web cache implementation</li> </ul> </li> <li>Freshness calculation</li> <li> <ul> <li>age and expiration calculations</li> </ul> </li> <li> <ul> <li>is a cache entry fresh?</li> </ul> </li> </ul> <h4 id="validation-model">Validation Model</h4> <ul> <li>Fresh or not?</li> <li>If-modified-since [date]</li> </ul> <h2 id="chapter-7tcp-transport-layer-"><strong>Chapter 7:TCP, transport layer</strong> <a name="topic-7"></a></h2> <p><a href="#blog-chapters">Back to Blog Chapters</a></p> <ul> <li>Logical communication</li> <li>End-to-end communication <h4 id="netork-layer-best-efforts">Netork layer: best efforts</h4> </li> <li>does not provide reliability</li> <li>or any other: bdw, sec, timeliness</li> </ul> <h3 id="transport-layer-main-protocols">Transport Layer main protocols</h3> <ul> <li>Key funcs: multiplex and de-multiplex applications (processes), using port numbers, range from 0 to 65535(1«16)</li> <li>Breaking data into appropriate size pieces, called segments, and re-assembly at the receiver</li> <li>connection setup, state management, teardown</li> <li>TCP: reliability guarantees, flow control, congestion control, mechanisms, etc</li> </ul> <h4 id="tcp">TCP</h4> <ul> <li>only pass messages to application layer only if it is correct</li> </ul> <h4 id="udp">UDP</h4> <ul> <li>not offering any reliability</li> <li>Best effort service</li> <li>does not provide reliability, segments can be out of order</li> <li>smaller header than tcp</li> <li>no congestion or flow control</li> <li>Can build application layer to support specific requirements</li> <li>Used for multimedia applications, loss tolerant, rate sensitive, big overhead compared to transmitted data</li> <li>Checksum: error(flipped bits)</li> </ul> <h5 id="connectionless">Connectionless</h5> <ul> <li>No handshaking</li> <li>No previous agreement before sending the data</li> <li>Each segment is handled independently</li> </ul> <h4 id="binding">Binding</h4> <ul> <li>port numbers are bound to an app</li> </ul> <h4 id="segmentation">Segmentation</h4> <p><a href="#blog-chapters">Back to Blog Chapters</a></p>]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[computer networks - INI]]></summary></entry><entry><title type="html">Link to our Game Development Project - TimeOut</title><link href="https://ychen884.github.io/blog/2023/gameDev/" rel="alternate" type="text/html" title="Link to our Game Development Project - TimeOut"/><published>2023-08-27T18:37:00+00:00</published><updated>2023-08-27T18:37:00+00:00</updated><id>https://ychen884.github.io/blog/2023/gameDev</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/gameDev/"><![CDATA[<p>Check this out: https://rod233.itch.io/timeout I worked as a member of the SE team - Graphics.</p>]]></content><author><name></name></author><category term="Study"/><category term="Dev"/><summary type="html"><![CDATA[:) An interesting game dev project.]]></summary></entry><entry><title type="html">My Courses &amp;amp; Grades in UW-Madison</title><link href="https://ychen884.github.io/blog/2023/undergradCourses/" rel="alternate" type="text/html" title="My Courses &amp;amp; Grades in UW-Madison"/><published>2023-08-20T18:37:00+00:00</published><updated>2023-08-20T18:37:00+00:00</updated><id>https://ychen884.github.io/blog/2023/undergradCourses</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/undergradCourses/"><![CDATA[ <p>The University of Wisconsin-Madison offers an exceptional Computer Science track for undergraduate students, enabling them to delve into various fields within the discipline. During my undergraduate studies, I concentrated on system courses, which allowed me to gain valuable insights into this specialized area.</p> <p>Below is a breakdown of the courses I undertook at UW-Madison. The advanced courses have been highlighted at the beginning of the list for emphasis. I am profoundly grateful to my instructors, whose dedication and passion have significantly shaped my academic journey. Their guidance, coupled with my relentless hard work and consistent efforts, has truly made a difference in my education.</p> <p>The courses at UW-Madison are categorized into three distinct levels:</p> <p>Elementary (E): Typically, entry-level courses designed for freshmen and sophomores. Intermediate (I): These courses are aimed at students in their sophomore to junior years. Advanced (A): Targeted at students in their junior to senior years, these courses focus on more specialized and complex topics. The education I received at UW-Madison has not only broadened my knowledge but also laid a solid foundation for my future pursuits in the field of Computer Science.</p> <table data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-field="Courses">Courses</th> <th data-field="Description">Description</th> <th data-field="Final Grade">Final Grade</th> </tr> </thead> </table> <p></p> ]]></content><author><name></name></author><category term="Study"/><category term="UW-Madison"/><summary type="html"><![CDATA[:) I enjoy all the courses I took in UW-Madison.]]></summary></entry></feed>