<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://ychen884.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ychen884.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-08-31T16:14:10+00:00</updated><id>https://ychen884.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Information Security - Currently Updating…</title><link href="https://ychen884.github.io/blog/2023/14741/" rel="alternate" type="text/html" title="Information Security - Currently Updating…"/><published>2023-08-29T11:00:00+00:00</published><updated>2023-08-29T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/14741</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/14741/"><![CDATA[<h3 id="reference-book">Reference Book</h3> <h4 id="security-engineering-a-guide-to-building-dependable-systems-by-ross-j-anderson">Security Engineering: A Guide to Building Dependable Systems, by Ross J. Anderson</h4> <h3 id="what-is-security">What is security?</h3> <h3 id="overview-of-topics">Overview of Topics</h3> <ul> <li>Foundations &amp; crypto</li> <li>Access Control</li> <li>Network and web sec</li> <li>Software sec</li> <li>crypto app</li> <li>Human and socio-eco factors</li> </ul> <h4 id="secrecy-privacy-and-confidentiality">Secrecy, privacy, and confidentiality</h4> <ul> <li>Privacy: keeping personal information secret</li> <li>Confidentiality: obligation to preserve someone else’s information secret</li> <li>Secrecy: effect of mechanisms used to limit the number of principles who can access information</li> </ul> <h4 id="data-integrity">Data integrity</h4> <ul> <li>Protect message contents <h4 id="identification">Identification</h4> </li> <li>Identify oneself to the system</li> <li>Can by pseudonymous <h4 id="anonymity">Anonymity</h4> </li> <li>Alice decided to use Tor to browse websites anonymously <h4 id="authentication">Authentication</h4> </li> <li>Authenticate the letter I received is from X <h4 id="non-repudiation">Non-repudiation</h4> </li> <li>Assurance that someone cannot deny something</li> </ul> <h4 id="authorization-certification-access-control-revocatio-witnessing">Authorization, certification, access control. revocatio, witnessing</h4> <ul> <li>Witnessing: verifying the creation or existence of information by an entity other than creator.</li> <li>Revocation: Retraction of certification or authorization</li> </ul> <h4 id="freshness--age">Freshness &amp; AGE</h4> <ul> <li>Freshness: proof that an event occurred after a given point in time</li> <li>Age: Proof that an event occurred before a given point in time</li> </ul> <h4 id="mechanisms-to-achieve-freshness-and-age">Mechanisms to achieve freshness and age</h4> <ul> <li>Timestamp</li> </ul> <h4 id="availability">Availability</h4> <h3 id="security-analysis">Security analysis</h3> <ul> <li>Consider computer systems at the doctor’s office</li> <li>Target system? Enumerate assets &amp; value, Operating Value, Replacement cost</li> <li>Adversaries?</li> <li>Security requirements?</li> <li>Effective Security Approach?</li> </ul> <h3 id="approaches-to-security">Approaches to security</h3> <ul> <li>Social norms: socially unacceptable for some behaviors</li> <li>Legal enforcement: laws</li> <li>Economics: attack is too costly</li> </ul> <h3 id="technological-approaches">Technological approaches</h3> <ul> <li>Keep bad people at bay</li> <li>Strong lines of defense: cryptography, firewall, …</li> <li>Redundancy: Availability, multiple paths</li> <li>Detection: can be used as a feed to legal system</li> <li>Preemptive strike: ptp file sharing network poisoning</li> <li>Recovery: Backups</li> </ul> <h3 id="security-engineering">Security Engineering</h3> <ul> <li>Practice is important!</li> </ul> <h2 id="threat-model">Threat Model</h2> <h4 id="stride---different-types-of-attacks">STRIDE - different types of attacks</h4> <h4 id="security-properties">Security Properties</h4> <h4 id="example---security-of-atm">Example - security of ATM</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>People --------card info--------&gt; Bank

Create PIN:
1. PIN verification key to get a natural PIN from an acct number (using like DES)
2. The user's selected pin is combined with the natrual pin to get the PIN offset
3. PIN offset is stored on the bank side
4. Without the pin verification key, the attacker wouldn't get the natural pin

PIN verification key + Account number
               |
               V
            Natural PIN      User's pin
                |               |
                -----------------
                        |
                        V
                    PIN offset


Verify PIN:
1. Re-compute Pin offset using acct number and user's pin
2. Compare it with the stored one

Do we send user's pin through the network? NO

Enc(Pin enc key, pin) ----&gt; Enc(Pin enc key, pin)
Bank then can decrypt to get the actual pin, and compute

Terminal or hardware is trusted, with its own key.
Working keys to allow transactions with foreign banks
Zone keys

It still fails... (Ross Anderson, 1993)

Security by obsecurity not correct
(reliance on secrecy as the main method of providing security to a system or component, specifically in security engineering, whether on design or implementation.)

Policies are important!
- In the US, custormer bears almost no responsibility in the charges incurred


Insider Attacks
Backer's ability to issue a 2nd card
- Could even conceal withdrawals in some cases

Outsider attacks
- Postal interception of cards and PINs
- Replay attacks
- Test transactions
- False terminals
- Fake slots
- Wireless camera


Guessable PINs
Complex fraud


• Security by obscurity
• No prior experience available
• Result: Threat model was wrong
Focused on what could possibly go wrong
• Relatively complex key system to ensure secrecy
• Should have focused on what was likely to go wrong
• Human error rendering cryptosystem useless 
• Should consider both human and tech. factors


Recommendations
• Get inspiration from safety-critical systems
• List all possible failure modes
• Document which strategy is used to make each failure mode impossible
• Review the proposed implementation of strategies by many experts
• Certification required to ensure properly trained personnel is in charge of maintenance of cryptosystem


Possible strategies
• Formal verification
    • Similar to the railway system 
    • Used in cryptology
• Feedback loop failure analysis and design guidelines 
    • Similar to avionics
    • E.g., wireless security: WEPà802.11i 
• More reading
    • Chip and pin
    • http://www.cl.cam.ac.uk/research/security/banking/


Did we learn the lessons?
• EMV: Why Payment Systems Fail
• 24 years later – same author (Ross Anderson, adding Steven J. Murdoch)
• Chip and pin/signature cards
• Yes cards: copy chip certificate and say “yes” to any PIN
• Can defeat with online transaction verification (requires chip to verify transaction details) or Dynamic Data Authentication (requires crypto processor in chip)
• Side-effect: PIN use in stores made it easier to create magnetic strip cards and steal from ATMs


</code></pre></div></div> <h2 id="boolean-attack-tree">Boolean attack tree</h2> <ul> <li>Listing all possible failure modes <h2 id="parameterized-attack-tree">Parameterized attack tree</h2> </li> <li>Can be used to assess the cost of an attack</li> <li>Can use other quantities (e.g., probabilities) instead <h2 id="practical-attack-tree">Practical attack tree</h2> </li> <li>Generally multi-parameter</li> <li>Probabilities</li> <li>Monetary cost</li> <li>Combination of continuous and boolean parameters</li> <li>Requires special equipment/knowledge…</li> <li>Needs to be correlated with knowledge about attackers to be useful 　</li> </ul> <h2 id="stride">STRIDE</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>• Six categories
• Spoofing of user identity
• Tampering
• Repudiation
• Information disclosure (privacy breach or data leak) 
• Denial of service (D.o.S)
• Elevation of privilege
</code></pre></div></div> ]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[Info Sec - INI]]></summary></entry><entry><title type="html">Fundamentals of Telecommunication Networks - Currently Upating…</title><link href="https://ychen884.github.io/blog/2023/14740/" rel="alternate" type="text/html" title="Fundamentals of Telecommunication Networks - Currently Upating…"/><published>2023-08-28T11:00:00+00:00</published><updated>2023-08-28T11:00:00+00:00</updated><id>https://ychen884.github.io/blog/2023/14740</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/14740/"><![CDATA[<h3 id="reference-book">Reference Book</h3> <h4 id="computer-networking-7th-edition-james-kurose-and-keith-ross">Computer Networking 7th Edition, James Kurose, and Keith Ross</h4> <h3 id="borad-overview-of-fundamental-principles">Borad Overview of Fundamental Principles</h3> <ul> <li>Fundamentals of the protocol stack</li> <li>Networking tools &amp; protocols</li> <li>Paper reading</li> </ul> <h3 id="top-down-approach">Top-down approach</h3> <ul> <li>Applciation Layer + overlays</li> <li>Transport Layers</li> <li>Network Layers</li> <li>Data Link Layer</li> </ul> <h3 id="introduction-to-networking">Introduction to Networking</h3> <h4 id="hosts-as-ending-systems-running-network-apps">Hosts as ending systems, running network apps</h4> <ul> <li>Connected with using communication links (fiber, copper, radio, WIFI, satellite, etcs)</li> <li>Bandwidth</li> </ul> <h4 id="nuts--bolts-view">“Nuts &amp; bolts” view</h4> <ul> <li>Protocols: like TCP, IP, HTTP, UDP, DNS, ARP, etcs <h4 id="network-of-networks">Network of networks</h4> </li> <li>Loosely hierarchical</li> <li>Public vs private networks</li> <li>Internet Service Provders(ISPS) <h4 id="standards">Standards</h4> </li> <li>RFC: Request for Comments</li> <li>IETF: Internet Engineering Task Forces <h4 id="services-view">“Services” view</h4> </li> <li>Communication infrastructure, enabling distributed applications</li> <li>Communication services, provided to applications, connectionless or connection-oriented</li> </ul> <h3 id="what-is-a-protocl">What is a PROTOCL?</h3> <ul> <li>Human protocls: A-&gt;B: “What’s the time?” B-&gt;A: “12:00”</li> <li>Define the format, order of messages sent and recieved among network entities, and the actions taken on message transmission or receipt.</li> <li>All communication activity on the Internet is governed by Protocols</li> </ul> <h3 id="network-structure">Network Structure</h3> <h4 id="network-edge-hosts-running-apps-clients-and-servers">Network Edge: Hosts running apps, Clients and Servers</h4> <ul> <li>End systems(hosts): running apps, source or destination of network data</li> <li>Client/Server model: a client asks for and gets services from an “always-on” server. Web browser/Web Server</li> <li>Peer-to-peer model: Minimal use of dedicated servers. Peers host files for other peers.</li> </ul> <h3 id="connection-orientated-communication-services">Connection-orientated Communication Services</h3> <ul> <li>Goal: Reliable data transfer between end systems</li> <li>Requires handshaking before sending data</li> <li>Provides Reliability</li> <li>Example: TCP in Transport Layer</li> </ul> <h3 id="different-services-for-different-applications">Different services for different applications</h3> <ul> <li>TCP: HTTP, FTP, Telnet(remote login), SMTP(email)</li> <li>UDP: DNS, Skype(VOIP), Streaming media, Zoom(Teleconferencing)</li> </ul> <h4 id="network-cores-routers-interconnected-networks-network-of-networks">Network Cores: Routers, Interconnected Networks, “Network of networks”</h4> <ul> <li>A mesh of interconnected routers</li> <li>Circuit switching: Discrete paths, end-to-end resoures reserved for the connection, no sharing with other connections</li> <li>Network bandwidth is divided into pirces, allocated to connections, and idle if not used by the connection owner</li> <li>FDM, TDM</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TDM
 Freq   ｜｜｜｜｜｜｜
        ｜｜｜｜｜｜｜
        ｜｜｜｜｜｜｜
        TIme

FDM
Users use different freq
 Freq   -----------
<span class="p">        -----------
        -----------</span>
        TIme
</code></pre></div></div> <p>Either: Devide the available bdw / slots</p> <p>Frequency is measured by Hz. Assuming pipe is thin, so only some number of parallel bits. Additional frequency more bits, more channel less bits per time slot</p> <p>or Users use full freqs for per time slot</p> <p>example: How long does it take to send a file of 640000bits from A to B over a circuit-switched network? Each link uses TDM with 24 slots 500 msec to build the end-to-end circit All links with bandwith 1.536Mbps</p> <p>TDM splits the transmission rate among all slots, A single-circuit transmission rate is 1.536Mbps/24 = 64Kbps 10 sec + 500ms = 10.5 seconds</p> <h3 id="packet-switching-discrete-chunks-of-data-every-packet-uses-the-full-bdw-of-a-link-no-tdmfdm">Packet switching: Discrete chunks of data, every packet uses the full bdw of a link (no TDM/FDM)</h3> <ul> <li>Packet moved hop by hop, routed.</li> <li>+ Connectionless/Stateless</li> <li>+ No resource sharing</li> <li>- Resource contention: Aggregate demand can exceed available resources in the intermediate routers</li> <li>- Congestion: Packet wait in routers’ queues, waiting to user the whole link</li> <li>- Packet arrive from multiple sources</li> <li>- Packet can be dropped if demnand is too high</li> </ul> <h3 id="statistical-multiplexing">Statistical Multiplexing</h3> <ul> <li>Packets go from different sources, to the same router</li> <li>packets arrive in random/statistical order</li> </ul> <p>Pattern has to be determined by some means of statistical methods.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">    ------------</span>
----|           |
----|           |----&gt;
----|           |
    ------------|
</code></pre></div></div> <h3 id="store-and-forward-model">Store-and-forward Model</h3> <ul> <li>For a packet of L bits</li> <li>On a link of R bps throughput (bdw)</li> <li>Takes L/R seconds to transmit the packet (Transmission time)</li> <li>The entire packet (all the bits) must arrive at the router before it can be transmitted to next node.</li> <li>Example: 7.5Mb/1.5Mbps = 5 seconds</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host A ---- R bps ----&gt; Node B ----- Rbps ------&gt; Node C ---- Rbps ---&gt; Host B
All links are 1.5 Mbps
Send a 7.5 Mb file:
Time = 7.5Mb/1.5Mbps = 5 sec (ignoring propogation, queueing, setup time)
Why not 15 sec? Packet switching, we can see packet granularity helps!

If 5000 packets of each 1500 bits
Time at which the second packt reached the end: 1 msec after packet 1
Time to forward a packet in a link: 1500 bits/1.5 Mbps = 1 msec
Time at which the first packet reached the end: 3 msec
Totla time: 3 msec + 4999 <span class="err">*</span> 1 msec = 5.002 sec: nice improvements!
</code></pre></div></div> <h3 id="packet-vs-circuit-switching">Packet vs circuit switching</h3> <ul> <li>Allows more users</li> <li>Imagine a 1 Mbps link</li> <li>n users: Active 10% of the tie, using 100Kbps when active</li> <li>Max n for circuit switching: 10 users</li> <li>Max n for packet switching:</li> </ul> <p>With 40 users, the probability of &gt; 10 being active is &lt; 0.001 Calculate probability</p> <h3 id="is-packet-switching-the-answer">Is packet switching the answer?</h3> <ul> <li>+ Great for burst data</li> <li>+ Resources are shared</li> <li> <p>+ Simpler: no circuit set-up / reservations</p> </li> <li>- More packets that cannot be queued and handles</li> <li> <ul> <li>Packet delay and loss</li> </ul> </li> <li> <ul> <li>Must add protection (complexity) for reliable transmission and congestion control</li> </ul> </li> </ul> <h3 id="delay-and-loss-in-packet-switching-networks">Delay and Loss in Packet Switching Networks</h3> <h4 id="sources-of-delayloss">Sources of delay/loss</h4> <ul> <li>Before transmission, packets queue in router buffers</li> <li>Store process and forward once all the bits are received</li> <li>Packet arrival rate may exceed output capacity</li> </ul> <h4 id="delay-types">Delay types</h4> <ul> <li>Processing Delay: Time spent in the router: check for bit errors(checksums), determine the output link(next hop)</li> <li>Queueing Delay: Each output link in a router stores packets in a queue(buffer), depends on the congestion level of the router and the transmission algorithms.</li> <li>Transmission Delay: T = L/R time to transmit packet, place all the packet bits in the link</li> <li>Propagation Delay: $2.8 * 10^8$ m/s, bits travelling through a medium (fiber, wireless,..)</li> </ul> <h3 id="nodal-delay">Nodal delay</h3> <p>dproc + dqueue + dtrans + dprop =&gt; dnodal</p> <ul> <li>why queueing delay depends on network congestions? depends on statistical multiplexing. (0~few ms)</li> </ul> <h3 id="queuing-delay">Queuing delay</h3> <p>L = packet length (bits/pkt) R = link speed (bps) λ = average packet arrival rate Traffic intensity (ρ) = $L * λ / R$</p> <ul> <li>if ~ 0: average queueing delay is small</li> <li>=1: delayes become large, a small increase in traffic substantially increases the delay</li> <li>greater than 1: More packet arriving than can be processed, the average delay goes to infinity</li> </ul> <h3 id="packet-loss">Packet loss</h3> <ul> <li>queue preceding link in the router has a finite capacity</li> <li>When a packet arrives in a full queue, the packet is dropped</li> <li>A packet packet may be retransmitted by the previous node, by the source end system, not retransmited at all</li> </ul> <h3 id="real-delays">Real delays</h3> <ul> <li>Tool: traceroute provides delay measurements for each hop in the path</li> <li>For all routers i in some path:</li> <li>Send 3 packets(probes) that will reach router i on the path roward the destination</li> <li>The router i will respond to the sender</li> <li>Measure transmission and reply interval</li> <li>Info: Intermediate router, 3 delay measurements, can have different routes if congested/lost</li> </ul> <h3 id="networks-are-complex-how-to-organize">Networks are complex! How to organize</h3> <ul> <li>Many components, many layers <h4 id="what-architecture-should-be-used">What architecture should be used?</h4> </li> <li>Layered Network Architecture</li> <li>Set of layers, each of them: provides a service(defined in a protocol), specifies an interface for accessing the service</li> <li>User services of the layer direcly <h3 id="network-architecture-defines-all-the-layers-and-the-design-of-protocolsinterfaces-for-each-layer">Network architecture defines all the layers and the design of protocols/interfaces for each layer</h3> </li> </ul> <h3 id="why-layering">Why layering?</h3> <h4 id="decompose-the-complex-networking-problem-into-managable-pieces">Decompose the complex networking problem into managable pieces</h4> <ul> <li>Monolithic non-layered architectures are costly, inflexible, and soon obsolete.</li> <li>Structured way to understand</li> <li>Protocol in each layer can be developed seperately from those in other layers</li> <li>Implementation in a layer can change wihtout affecting other layers, as long as the interface remains the same</li> <li>Details not required in lower layers</li> <li>Simplifies the design, implementation and testing</li> </ul> <h3 id="why-not-layering">Why not layering?</h3> <ul> <li>Duplication of lower-layer functions, reliability at link + transport layer</li> <li>Information hiding affects performance, may require info from lower layers</li> </ul> <h3 id="iso-osi-reference-model">ISO OSI Reference Model</h3> <h3 id="iso-international-standard-organization">ISO: International Standard Organization</h3> <h4 id="osi-open-systems-interconnection-was-a-reference-framwork-to-enable-multi-vendor-interconnection-interoperability">OSI: Open Systems Interconnection was a reference framwork to enable multi-vendor interconnection (interoperability)</h4> <ul> <li>Provides a unified view of layers, services, and protocols in each layer</li> <li>Not well introduced, as TCP/IP pre-empted deployment of OSI protocols</li> </ul> <h3 id="application">Application</h3> <h3 id="presentation">Presentation</h3> <h3 id="session">Session</h3> <h3 id="transport">Transport</h3> <ul> <li>End-to-end transfer of messages (i.e., segments)</li> <li>Port numbers enable the multiplexing of various apps</li> <li>Message segmentations and reassembly</li> <li>Connection setup, maintenance, and release</li> </ul> <h3 id="network">Network</h3> <ul> <li>Transport packets across links</li> <li>Scalable addressing: Hierarchically</li> <li>Routing protocol: determine best paths..</li> <li>Example: IPv4 &amp; IPv6</li> </ul> <h3 id="data-link">Data Link</h3> <ul> <li>Transfer frames between 2 adjacent nodes (directly connected)</li> <li>A frame is a sequence of bits or blocks of information</li> <li>Inserts control, addressing, and error correction info</li> <li>Activation, maintenance, and deactivation of link connection</li> <li>Example: Ethernet, PPP, HDLC, Wi-Fi</li> </ul> <h3 id="physical">Physical</h3> <ul> <li>Transfer bits across a link</li> </ul> ]]></content><author><name></name></author><category term="Study"/><category term="CMU"/><summary type="html"><![CDATA[computer networks - INI]]></summary></entry><entry><title type="html">My Courses &amp;amp; Grades in UW-Madison</title><link href="https://ychen884.github.io/blog/2023/undergradCourses/" rel="alternate" type="text/html" title="My Courses &amp;amp; Grades in UW-Madison"/><published>2023-08-20T18:37:00+00:00</published><updated>2023-08-20T18:37:00+00:00</updated><id>https://ychen884.github.io/blog/2023/undergradCourses</id><content type="html" xml:base="https://ychen884.github.io/blog/2023/undergradCourses/"><![CDATA[ <p>The University of Wisconsin-Madison offers an exceptional Computer Science track for undergraduate students, enabling them to delve into various fields within the discipline. During my undergraduate studies, I concentrated on system courses, which allowed me to gain valuable insights into this specialized area.</p> <p>Below is a breakdown of the courses I undertook at UW-Madison. The advanced courses have been highlighted at the beginning of the list for emphasis. I am profoundly grateful to my instructors, whose dedication and passion have significantly shaped my academic journey. Their guidance, coupled with my relentless hard work and consistent efforts, has truly made a difference in my education.</p> <p>The courses at UW-Madison are categorized into three distinct levels:</p> <p>Elementary (E): Typically, entry-level courses designed for freshmen and sophomores. Intermediate (I): These courses are aimed at students in their sophomore to junior years. Advanced (A): Targeted at students in their junior to senior years, these courses focus on more specialized and complex topics. The education I received at UW-Madison has not only broadened my knowledge but also laid a solid foundation for my future pursuits in the field of Computer Science.</p> <table data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-field="Courses">Courses</th> <th data-field="Description">Description</th> <th data-field="Final Grade">Final Grade</th> </tr> </thead> </table> <p></p> ]]></content><author><name></name></author><category term="Study"/><category term="UW-Madison"/><summary type="html"><![CDATA[:) I enjoy all the courses I took in UW-Madison.]]></summary></entry></feed>